<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Home on http4k</title><link>https://http4k.org/</link><description>Recent content in Home on http4k</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Thu, 12 Dec 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://http4k.org/index.xml" rel="self" type="application/rss+xml"/><item><title>Connect Overview</title><link>https://http4k.org/ecosystem/connect/concepts/pattern/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/connect/concepts/pattern/</guid><description>&lt;p>The main bulk of non-operationally focussed application code in a modern Server-based HTTP microservice can be broken
down into a few broad areas:&lt;/p></description></item><item><title>Core</title><link>https://http4k.org/ecosystem/http4k/reference/core/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/http4k/reference/core/</guid><description>&lt;h3 id="installation-gradle">Installation (Gradle)&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-core&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="about">About&lt;/h3>
&lt;p>Apart from Kotlin StdLib, the core module has ZERO dependencies and provides the following:&lt;/p></description></item><item><title>Module Overview</title><link>https://http4k.org/ecosystem/connect/reference/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/connect/reference/overview/</guid><description>&lt;p>A quick reference as to what is what with the http4k Connect modules.&lt;/p>
&lt;h2 id="cloud-services">Cloud Services&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Vendor&lt;/th>
 &lt;th>System&lt;/th>
 &lt;th>In-Memory Fake&lt;/th>
 &lt;th>Notes&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>AWS&lt;/td>
 &lt;td>AppRunner&lt;/td>
 &lt;td>✅&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>AWS&lt;/td>
 &lt;td>CloudFront&lt;/td>
 &lt;td>✅&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>AWS&lt;/td>
 &lt;td>Cloudwatch Logs&lt;/td>
 &lt;td>✅&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>AWS&lt;/td>
 &lt;td>DynamoDb&lt;/td>
 &lt;td>✅&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>AWS&lt;/td>
 &lt;td>EventBridge&lt;/td>
 &lt;td>✅&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>AWS&lt;/td>
 &lt;td>Evidently&lt;/td>
 &lt;td>✅&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>AWS&lt;/td>
 &lt;td>Firehose&lt;/td>
 &lt;td>✅&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>AWS&lt;/td>
 &lt;td>IAM Identity Center&lt;/td>
 &lt;td>✅&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>AWS&lt;/td>
 &lt;td>Instance Metadata&lt;/td>
 &lt;td>✅&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>AWS&lt;/td>
 &lt;td>KMS&lt;/td>
 &lt;td>✅&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>AWS&lt;/td>
 &lt;td>Lambda&lt;/td>
 &lt;td>✅&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>AWS&lt;/td>
 &lt;td>S3&lt;/td>
 &lt;td>✅&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>AWS&lt;/td>
 &lt;td>Secrets Manager&lt;/td>
 &lt;td>✅&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>AWS&lt;/td>
 &lt;td>SES&lt;/td>
 &lt;td>✅&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>AWS&lt;/td>
 &lt;td>SNS&lt;/td>
 &lt;td>✅&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>AWS&lt;/td>
 &lt;td>SQS&lt;/td>
 &lt;td>✅&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>AWS&lt;/td>
 &lt;td>STS&lt;/td>
 &lt;td>✅&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>AWS&lt;/td>
 &lt;td>Systems Manager&lt;/td>
 &lt;td>✅&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>GitHub&lt;/td>
 &lt;td>V3 API&lt;/td>
 &lt;td>❌&lt;/td>
 &lt;td>Client Shell and WebHook Signing only&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>GitLab&lt;/td>
 &lt;td>API&lt;/td>
 &lt;td>❌&lt;/td>
 &lt;td>Client Shell and WebHook Signing only&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Google&lt;/td>
 &lt;td>Analytics GA4&lt;/td>
 &lt;td>✅&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Google&lt;/td>
 &lt;td>Analytics UA&lt;/td>
 &lt;td>✅&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Kafka&lt;/td>
 &lt;td>Rest Proxy&lt;/td>
 &lt;td>✅&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Kafka&lt;/td>
 &lt;td>Schema Registry&lt;/td>
 &lt;td>✅&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Mattermost&lt;/td>
 &lt;td>WebHook&lt;/td>
 &lt;td>❌&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Slack&lt;/td>
 &lt;td>Slack&lt;/td>
 &lt;td>✅&lt;/td>
 &lt;td>Minimal support for sending messages to channel and via webhook&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;br/>
&lt;br/>
&lt;h3 id="ai-services">AI Services&lt;/h3>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Vendor&lt;/th>
 &lt;th>System&lt;/th>
 &lt;th>In-Memory Fake&lt;/th>
 &lt;th>Notes&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>AnthropicAI&lt;/td>
 &lt;td>API&lt;/td>
 &lt;td>✅&lt;/td>
 &lt;td>Includes content generators&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>AzureAI&lt;/td>
 &lt;td>API&lt;/td>
 &lt;td>✅&lt;/td>
 &lt;td>Includes content generators and GitHubModels compatibility&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>LangChain4J&lt;/td>
 &lt;td>Adapters&lt;/td>
 &lt;td>❌&lt;/td>
 &lt;td>Adapters to be plugged into LangChains&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>LM Studio&lt;/td>
 &lt;td>API&lt;/td>
 &lt;td>✅&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Ollama&lt;/td>
 &lt;td>API&lt;/td>
 &lt;td>✅&lt;/td>
 &lt;td>Includes content generators and image generation&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Open AI&lt;/td>
 &lt;td>API&lt;/td>
 &lt;td>✅&lt;/td>
 &lt;td>Includes content generators and image generation&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;br/>
&lt;br/>
&lt;h3 id="storage-implementations">Storage Implementations&lt;/h3>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Implementation&lt;/th>
 &lt;th>Notes&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>In-Memory&lt;/td>
 &lt;td>Included with all Fakes&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>File-Based&lt;/td>
 &lt;td>Included with all Fakes&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>JDBC&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Redis&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>S3&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table></description></item><item><title>http4k Core</title><link>https://http4k.org/ecosystem/http4k/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/http4k/</guid><description/></item><item><title>Your first http4k app</title><link>https://http4k.org/tutorial/your_first_http4k_app/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/tutorial/your_first_http4k_app/</guid><description>&lt;p>Welcome to the world of http4k! In this guide, we&amp;rsquo;ll run you through the steps required to get up and running with your first Kotlin server application. We&amp;rsquo;ll generate the project, make some requests to it and then build it into a runnable application. By the end, you&amp;rsquo;ll have a fully working app built packaged and tested using the Gradle build tool.&lt;/p></description></item><item><title>http4k Connect</title><link>https://http4k.org/ecosystem/connect/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/connect/</guid><description/></item><item><title>Serverless http4k with AWS Lambda</title><link>https://http4k.org/tutorial/serverless_http4k_with_aws_lambda/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/tutorial/serverless_http4k_with_aws_lambda/</guid><description>&lt;p>In this guide, we&amp;rsquo;ll run you through the steps required to get an http4k application deployed and running on AWS Lambda and available to call over the internet using AWS ApiGateway. If you&amp;rsquo;re not familiar with the http4k concepts for HTTP and Serverless apps, then we advise you read them &lt;a href="https://http4k.org/ecosystem/http4k/concepts/http/">here&lt;/a> and &lt;a href="https://http4k.org/ecosystem/http4k/concepts/serverless/">here&lt;/a>. To make an app you can follow the &lt;a href="https://http4k.org/tutorial/your_first_http4k_app/">Your first http4k app&lt;/a> tutorial before tackling this guide.&lt;/p></description></item><item><title>Going native with Graal on AWS Lambda</title><link>https://http4k.org/tutorial/going_native_with_graal_on_aws_lambda/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/tutorial/going_native_with_graal_on_aws_lambda/</guid><description>&lt;p>In this guide, we&amp;rsquo;ll run you through the steps required to get an http4k application deployed and running on AWS Lambda with GraalVM and available to call over the internet using AWS ApiGateway. If you&amp;rsquo;re not familiar with the http4k concepts for HTTP and Serverless apps, then we advise you read them &lt;a href="https://http4k.org/ecosystem/http4k/concepts/http/">here&lt;/a> and &lt;a href="https://http4k.org/ecosystem/http4k/concepts/serverless/">here&lt;/a>. To make an app you can follow the &lt;a href="https://http4k.org/tutorial/your_first_http4k_app/">Your first http4k app&lt;/a> tutorial. Then follow the steps in the &lt;a href="https://http4k.org/tutorial/serverless_http4k_with_aws_lambda/">Serverless http4k with AWS Lambda&lt;/a> tutorial before tackling this guide.&lt;/p></description></item><item><title>CVE-2024-55875: XXE(XML External Entity Injection) vulnerability</title><link>https://http4k.org/security/cve-2024-12345/</link><pubDate>Thu, 12 Dec 2024 00:00:00 +0000</pubDate><guid>https://http4k.org/security/cve-2024-12345/</guid><description>&lt;h3 id="description">Description&lt;/h3>
&lt;p>There is a XXE(XML External Entity Injection) vulnerability when http4k handling malicious XML contents within requests,
which might allow attackers to read local sensitive information on server, trigger Server-side Request Forgery and even
execute code under some circumstances.&lt;/p></description></item><item><title>Preview: http4k v6 and beyond! Introducing Enterprise Edition and Long-Term Support</title><link>https://http4k.org/news/http4k-v6-and-ee/</link><pubDate>Tue, 03 Dec 2024 00:00:00 +0000</pubDate><guid>https://http4k.org/news/http4k-v6-and-ee/</guid><description>&lt;h4 id="tldr">TL;DR&lt;/h4>
&lt;ul>
&lt;li>http4k will release its next major version (6) in January 2025&lt;/li>
&lt;li>http4k Community Edition (CE) - will continue to be released under the existing Apache 2 license.&lt;/li>
&lt;li>From v6, http4k CE will set its minimum supported target JVM version to 21.&lt;/li>
&lt;li>We are introducing the &lt;a href="https://http4k.org/enterprise">http4k Enterprise Edition (EE)&lt;/a> subscription under a new commercial license, which will provide LTS support for http4k v5 and older JVMs as well as enterprise support features.&lt;/li>
&lt;/ul>
&lt;h4 id="a-brief-history-of-time">A brief history of time&lt;/h4>
&lt;p>From its inception over seven years ago, http4k has been increasingly adopted by teams looking to leverage its powerful simplicity, focus on testability and uncompromised stability in their projects. That now translates to over two million monthly downloads. With over 150 modules, http4k has continued to grow steadily and to have some of the most flexible support and integrations available in the Kotlin ecosystem, all backed up by rock-solid test suites and our trademark lightweight approach.&lt;/p></description></item><item><title>http4k Platform v5 - New Servers, Loom, TracerBullet, OpenAI plugin SDK and more</title><link>https://http4k.org/news/http4k_v5/</link><pubDate>Thu, 01 Jun 2023 00:00:00 +0000</pubDate><guid>https://http4k.org/news/http4k_v5/</guid><description>&lt;img class="imageMid" src="./lego.png" alt="http4k lego"/>
&lt;p>We’re thrilled to announce the next major release of http4k! Since the last major release, the team has been busy enhancing existing features, adding new capabilities with help from our amazing community, things that we&amp;rsquo;ve needed on our own real world projects, and a sprinkling of new magic to keep pushing the boundaries of what&amp;rsquo;s possible with the http4k technology - all 127 modules of it.&lt;/p></description></item><item><title>Add typesafe 12-factor configuration to http4k apps with Environments</title><link>https://http4k.org/news/typesafe_configuration/</link><pubDate>Fri, 01 Oct 2021 00:00:00 +0000</pubDate><guid>https://http4k.org/news/typesafe_configuration/</guid><description>&lt;h3 id="intro">Intro&lt;/h3>
&lt;p>This post covers the various concerns around configuring HTTP apps, and introduces the http4k approach for addressing these when deploying applications into cloud-native environments, which leverages the Kotlin type system for maximum safely and code reuse.&lt;/p></description></item><item><title>Reassurance to http4k users regarding JCenter shutdown</title><link>https://http4k.org/news/regarding_jcenter/</link><pubDate>Mon, 01 Feb 2021 00:00:00 +0000</pubDate><guid>https://http4k.org/news/regarding_jcenter/</guid><description>&lt;p>It was announced this week that the JCenter artifact repository would be &lt;a href="https://jfrog.com/blog/into-the-sunset-bintray-jcenter-gocenter-and-chartcenter/">shutting down in May 2021&lt;/a>. As JCenter was a superset of the Maven Central repository, this obviously comes as disappointing and worrying news regarding the future of Open Source software distribution for the JVM. Many builds will undoubtedly break as a result of this move.&lt;/p></description></item><item><title>http4k v4 - 17 platforms and counting...</title><link>https://http4k.org/news/http4k_v4/</link><pubDate>Fri, 01 Jan 2021 00:00:00 +0000</pubDate><guid>https://http4k.org/news/http4k_v4/</guid><description>&lt;p>Well, at last it&amp;rsquo;s here - after 3 years - http4k v4! Following on from the &lt;a href="https://http4k.org/news/retrospective_v3/">retrospective&lt;/a> that we did on version 3, we&amp;rsquo;ve been busy polishing, tidying up the edges, and pushing out a bunch of changes to make the project sparkle. Ready? Then let&amp;rsquo;s dive into the good stuff that&amp;rsquo;s been going on at http4k Towers.&lt;/p></description></item><item><title>http4k Toolbox - Guns for show, knives for a pro</title><link>https://http4k.org/news/toolbox/</link><pubDate>Sun, 01 Nov 2020 00:00:00 +0000</pubDate><guid>https://http4k.org/news/toolbox/</guid><description>&lt;img class="imageMid" src="./guns.jpg" alt="lock stock: guns for show"/>
&lt;p>Over the years of creating apps with http4k, we&amp;rsquo;ve collated several tools that we use to turbo charge our development activities. While working on v4 of the library, and with a little time on our hands, we decided to bring all of these tools together into a single place so that all of our users could get their benefits.&lt;/p></description></item><item><title>Nanoservices - The Power of Composition</title><link>https://http4k.org/news/nanoservices/</link><pubDate>Thu, 01 Oct 2020 00:00:00 +0000</pubDate><guid>https://http4k.org/news/nanoservices/</guid><description>&lt;p>http4k is a small library with a zero dependencies (apart from Kotlin StdLib), but what really makes it shine is the power afforded by the combination of the &amp;ldquo;Server as a Function&amp;rdquo; concepts of &lt;code>HttpHandler&lt;/code> and &lt;code>Filter&lt;/code>.&lt;/p></description></item><item><title>A retrospective on http4k v3</title><link>https://http4k.org/news/retrospective_v3/</link><pubDate>Tue, 01 Sep 2020 00:00:00 +0000</pubDate><guid>https://http4k.org/news/retrospective_v3/</guid><description>&lt;p>It&amp;rsquo;s been quite a long time since we released version 3 of http4k all the way back in November 2017. Wow - that&amp;rsquo;s over 1000 days in fact! Still, that doesn&amp;rsquo;t mean that we&amp;rsquo;ve been sitting on our hands over in &lt;strong>http4k Towers&lt;/strong> - far from it, we&amp;rsquo;ve been busier than ever making sure that we&amp;rsquo;ll remember 2020 for more than just hibernating away in a bunker. In fact, the current interesting situation did give us an idea for a pretty original piece of swag&amp;hellip;&lt;/p></description></item><item><title>Documenting http4k APIs with OpenApi3</title><link>https://http4k.org/news/documenting_apis_with_openapi/</link><pubDate>Wed, 01 May 2019 00:00:00 +0000</pubDate><guid>https://http4k.org/news/documenting_apis_with_openapi/</guid><description>&lt;p>This post describes &lt;strong>http4k&lt;/strong> support for fully describing and securing HTTP endpoints using version 3 of the &lt;strong>&lt;a href="https://www.openapis.org/">OpenApi&lt;/a>&lt;/strong> specification, providing typesafe JSON-schema documentation for messages and automatically validating incoming HTTP traffic.&lt;/p></description></item><item><title>Websockets. But typesafe. And testable. Without the Server.</title><link>https://http4k.org/news/typesafe_websockets/</link><pubDate>Fri, 01 Dec 2017 00:00:00 +0000</pubDate><guid>https://http4k.org/news/typesafe_websockets/</guid><description>&lt;p>Reaction to the last post introducing http4k was pretty good, and one of the most popular questions was: &lt;strong>&amp;ldquo;But what about Websockets&amp;rdquo;&lt;/strong>?&lt;/p></description></item><item><title>Server as a Function. In Kotlin. Typesafe. Without the Server.</title><link>https://http4k.org/news/meet_http4k/</link><pubDate>Wed, 01 Nov 2017 00:00:00 +0000</pubDate><guid>https://http4k.org/news/meet_http4k/</guid><description>&lt;h3 id="meet-http4k">Meet http4k&lt;/h3>
&lt;p>http4k is an HTTP toolkit written in Kotlin that enables the serving and consuming
of HTTP services in a functional and consistent way.&lt;/p></description></item><item><title/><link>https://http4k.org/ecosystem/connect/reference/slack/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/connect/reference/slack/</guid><description>&lt;h2 id="description-feature-overview-of-the-http4k-connect-slack-modules">****&amp;mdash;
category: Reference
type: ecosystem
ecosystem: http4k Connect
title: Slack
description: Feature overview of the http4k Connect Slack modules&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-connect-slack&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The Slack connector provides the following Actions:&lt;/p></description></item><item><title>About the docs</title><link>https://http4k.org/learn/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/learn/</guid><description>&lt;p>The http4k technical documentation has been designed following the &lt;strong>Grand Unified Theory of Documentation&lt;/strong>. Overall, the http4k developers firmly believe that API design should be natural and friendly to the user, and hence the codebase is not heavily commented. If we have done our jobs correctly, someone with the correct knowledge of a particular domain or platform should be able to implement systems using the http4k APIs by just using an IDE.&lt;/p></description></item><item><title>AI: Anthropic</title><link>https://http4k.org/ecosystem/connect/reference/ai/anthropic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/connect/reference/ai/anthropic/</guid><description>&lt;h3 id="installation">Installation&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-connect-ai-anthropic&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-connect-ai-anthropic-fake&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The http4k-connect AnthropicAI integration provides:&lt;/p>
&lt;ul>
&lt;li>AnthropicAI API Client&lt;/li>
&lt;li>FakeAnthropicAI server which can be used as testing harness for the API Client&lt;/li>
&lt;/ul>
&lt;h2 id="anthropicai-api-connector">AnthropicAI API connector&lt;/h2>
&lt;p>The AnthropicAI connector provides the following Actions:&lt;/p></description></item><item><title>AI: Azure</title><link>https://http4k.org/ecosystem/connect/reference/ai/azure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/connect/reference/ai/azure/</guid><description>&lt;h3 id="installation">Installation&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-connect-ai-azure&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-connect-ai-azure-fake&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The http4k-connect AzureAI integration provides:&lt;/p>
&lt;ul>
&lt;li>AzureAI API Client&lt;/li>
&lt;li>Compatibility with GitHub Models for testing, so you can use a GitHubToken instead of a deployed Azure model. Note that some endpoints are not available in GitHubModels APIs.&lt;/li>
&lt;li>FakeAzureAI server which can be used as testing harness for the API Client&lt;/li>
&lt;/ul>
&lt;h2 id="azureai-api-connector">AzureAI API connector&lt;/h2>
&lt;p>The AzureAI connector provides the following Actions:&lt;/p></description></item><item><title>AI: LangChain</title><link>https://http4k.org/ecosystem/connect/reference/ai/langchain/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/connect/reference/ai/langchain/</guid><description>&lt;h3 id="installation">Installation&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-connect-ai-langchain&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>LangChain4J is a versatile library that simplifies the creation and management of language processing workflows., It provides many integrations but does not allow for using http4k clients or http4k-connect clients. This module gives you some of these integrations by providing LangChain model adapters.&lt;/p></description></item><item><title>AI: LMStudio</title><link>https://http4k.org/ecosystem/connect/reference/ai/lmstudio/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/connect/reference/ai/lmstudio/</guid><description>&lt;h3 id="installation">Installation&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-connect-ai-lmstudio&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-connect-ai-lmstudio-fake&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The http4k-connect LmStudio integration provides:&lt;/p>
&lt;ul>
&lt;li>LmStudio API Client&lt;/li>
&lt;li>FakeLmStudio server which can be used as testing harness for either API Client&lt;/li>
&lt;/ul>
&lt;h2 id="lmstudio-api-connector">LmStudio API connector&lt;/h2>
&lt;p>The LmStudio connector provides the following Actions:&lt;/p></description></item><item><title>AI: Ollama</title><link>https://http4k.org/ecosystem/connect/reference/ai/ollama/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/connect/reference/ai/ollama/</guid><description>&lt;h3 id="installation">Installation&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-connect-ai-ollama&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-connect-ai-ollama-fake&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The http4k-connect Ollama integration provides:&lt;/p>
&lt;ul>
&lt;li>Ollama API Client&lt;/li>
&lt;li>FakeOllama server which can be used as testing harness&lt;/li>
&lt;/ul>
&lt;h2 id="ollama-api-connector">Ollama API connector&lt;/h2>
&lt;p>The Ollama connector provides the following Actions:&lt;/p></description></item><item><title>AI: OpenAI</title><link>https://http4k.org/ecosystem/connect/reference/ai/openai/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/connect/reference/ai/openai/</guid><description>&lt;h3 id="installation">Installation&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-connect-ai-openai&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-connect-ai-openai-fake&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The http4k-connect OpenAI integration provides:&lt;/p>
&lt;ul>
&lt;li>OpenAI API Client&lt;/li>
&lt;li>FakeOpenAI server which can be used as testing harness&lt;/li>
&lt;/ul>
&lt;h2 id="openai-api-connector">OpenAI API connector&lt;/h2>
&lt;p>The OpenAI connector provides the following Actions:&lt;/p></description></item><item><title>API Clients</title><link>https://http4k.org/ecosystem/connect/concepts/clients/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/connect/concepts/clients/</guid><description>&lt;p>Each system API Client is modelled as a single function with arity 1 (that is it takes only a single parameter) returning a &lt;a href="https://github.com/fork-handles/forkhandles/tree/trunk/result4k">Result4k&lt;/a> Success/Failure monad type), which is known as an &lt;code>Action&lt;/code>. The Client is responsible for managing the overall protocol with the remote system. There are also a set of extension methods generated to provide a more traditional function-based version of the same interface.&lt;/p></description></item><item><title>API: CloudEvents</title><link>https://http4k.org/ecosystem/http4k/reference/cloud_events/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/http4k/reference/cloud_events/</guid><description>&lt;h3 id="installation-gradle">Installation (Gradle)&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-api-cloudevents&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;a href="https://cloudevents.io/">Cloud Events&lt;/a> spec defines a common format for Events produced by Cloud services.&lt;/p></description></item><item><title>API: GraphQL</title><link>https://http4k.org/ecosystem/http4k/reference/graphql/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/http4k/reference/graphql/</guid><description>&lt;h3 id="installation-gradle">Installation (Gradle)&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-api-graphql&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// for the example below you will also need this dependency...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> implementation(&lt;span style="color:#e6db74">&amp;#34;com.expediagroup:graphql-kotlin-schema-generator&amp;#34;&lt;/span>, version = &lt;span style="color:#e6db74">&amp;#34;5.3.2&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="about">About&lt;/h3>
&lt;p>This module provides http4k integration for the excellent &lt;a href="https://www.graphql-java.com/">GraphQL-java&lt;/a> library, allowing you to either serve or consume &lt;a href="https://graphql.org">GraphQL&lt;/a> services using a simple adapter API.&lt;/p></description></item><item><title>API: JSON-RPC</title><link>https://http4k.org/ecosystem/http4k/reference/jsonrpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/http4k/reference/jsonrpc/</guid><description>&lt;h3 id="installation-gradle">Installation (Gradle)&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-api-jsonrpc&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="about">About&lt;/h3>
&lt;p>Support for JSON-RPC handlers, with support for both manual and automatic marshalling modes.&lt;/p></description></item><item><title>API: OpenApi</title><link>https://http4k.org/ecosystem/http4k/reference/contracts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/http4k/reference/contracts/</guid><description>&lt;h3 id="installation-gradle">Installation (Gradle)&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-api-openapi&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-format-&amp;lt;insert json lib&amp;gt;&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="about">About&lt;/h3>
&lt;p>The &lt;code>http4k-api-openapi&lt;/code> module adds a much more sophisticated routing mechanism to that available in &lt;code>http4k-core&lt;/code>. It adds the facility
to declare server-side &lt;code>Routes&lt;/code> in a completely typesafe way, leveraging the Lens functionality from the core. These &lt;code>Routes&lt;/code> are combined into &lt;code>Contracts&lt;/code>, which have the following features:&lt;/p></description></item><item><title>Arrange Filters into stacks</title><link>https://http4k.org/howto/arrange_filters_into_stacks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/howto/arrange_filters_into_stacks/</guid><description>&lt;p>http4k Filters are just decorator functions for HttpHandlers and process requests by applying the following process:&lt;/p>
&lt;ol>
&lt;li>Receive the Request&lt;/li>
&lt;li>Modify it&lt;/li>
&lt;li>Pass it to the next HttpHandler in the chain&lt;/li>
&lt;li>Receive the Response&lt;/li>
&lt;li>Modify it&lt;/li>
&lt;li>Return it to the caller&lt;/li>
&lt;/ol>
&lt;p>We can reason that we can combine filters together to form chains, or &amp;ldquo;Stacks&amp;rdquo; of processing logic - moving from the most generic to the most specific. But the ordering
of the filters is important in order that we have the information at the point in the stack when we need it. For example - if we want to record all HTTP traffic, we much ensure that we
do this after any exception handling has occurred (so that we can record the 5XX properly). Experience has shown that there is a general formula to be used when constructing stacks.&lt;/p></description></item><item><title>Authentication for HTTP services</title><link>https://http4k.org/howto/secure_and_auth_http/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/howto/secure_and_auth_http/</guid><description>&lt;h3 id="gradle-setup">Gradle setup&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-core&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// for OAuth examples
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-security-oauth&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>http4k provides a set of Filters for authenticating into other HTTP services. Usage of these filters is shown below to authenticate into a service. Each authentication type is generally available using both dynamic and static credential provision and checking mechanisms.&lt;/p></description></item><item><title>AWS</title><link>https://http4k.org/ecosystem/connect/reference/aws/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/connect/reference/aws/</guid><description>&lt;p>http4k-connect provides a standardised mechanism to connect to several AWS services. They all use the same mechanisms for authentication, which is what this page is about.&lt;/p></description></item><item><title>AWS: AppRunner</title><link>https://http4k.org/ecosystem/connect/reference/amazon/apprunner/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/connect/reference/amazon/apprunner/</guid><description>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-connect-amazon-apprunner&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-connect-amazon-apprunner-fake&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The AppRunner connector provides the following Actions:&lt;/p>
&lt;pre>&lt;code> * CreateService
 * DeleteService
 * ListServices
&lt;/code>&lt;/pre>
&lt;h3 id="example-usage">Example usage&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> USE_REAL_CLIENT = &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> deployedLambda = FunctionName(&lt;span style="color:#e6db74">&amp;#34;http4kLambda&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> fakeAppRunner = FakeAppRunner(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// we can connect to the real service or the fake (drop in replacement)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> http: HttpHandler = &lt;span style="color:#66d9ef">if&lt;/span> (USE_REAL_CLIENT) JavaHttpClient() &lt;span style="color:#66d9ef">else&lt;/span> fakeAppRunner
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// create a client
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> client = &lt;span style="color:#a6e22e">AppRunner&lt;/span>.Http(&lt;span style="color:#a6e22e">Region&lt;/span>.of(&lt;span style="color:#e6db74">&amp;#34;us-east-1&amp;#34;&lt;/span>), { AwsCredentials(&lt;span style="color:#e6db74">&amp;#34;accessKeyId&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;secretKey&amp;#34;&lt;/span>) }, http.debug())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// all operations return a Result monad of the API type
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> println(client.listServices())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The client APIs utilise the &lt;code>http4k-platform-aws&lt;/code> module for request signing, which means no dependencies on the incredibly fat
Amazon-SDK JARs. This means this integration is perfect for running Serverless Lambdas where binary size is a
performance factor.&lt;/p></description></item><item><title>AWS: CloudFront</title><link>https://http4k.org/ecosystem/connect/reference/amazon/cloudfront/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/connect/reference/amazon/cloudfront/</guid><description>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-connect-amazon-cloudfront&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-connect-amazon-cloudfront-fake&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The CloudFront connector provides the following Actions:&lt;/p>
&lt;pre>&lt;code> * CreateInvalidation
&lt;/code>&lt;/pre>
&lt;p>The client APIs utilise the &lt;code>http4k-platform-aws&lt;/code> module for request signing, which means no dependencies on the incredibly fat
Amazon-SDK JARs. This means this integration is perfect for running Serverless Lambdas where binary size is a
performance factor.&lt;/p></description></item><item><title>AWS: Cloudwatch Evidently</title><link>https://http4k.org/ecosystem/connect/reference/amazon/evidently/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/connect/reference/amazon/evidently/</guid><description>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-connect-amazon-evidently&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-connect-amazon-evidently-fake&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The Evidently connector provides the following Actions:&lt;/p>
&lt;pre>&lt;code> * CreateProject
 * CreateFeature
 * EvaluateFeature
 * BatchEvaluateFeature
 * DeleteFeature
 * DeleteProject
&lt;/code>&lt;/pre>
&lt;h3 id="example-usage">Example usage&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> USE_REAL_CLIENT = &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// we can connect to the real service or the fake (drop in replacement)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> http: HttpHandler = &lt;span style="color:#66d9ef">if&lt;/span> (USE_REAL_CLIENT) JavaHttpClient() &lt;span style="color:#66d9ef">else&lt;/span> FakeEvidently()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// create a client
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> client = &lt;span style="color:#a6e22e">Evidently&lt;/span>.Http(&lt;span style="color:#a6e22e">Region&lt;/span>.of(&lt;span style="color:#e6db74">&amp;#34;us-east-1&amp;#34;&lt;/span>), { AwsCredentials(&lt;span style="color:#e6db74">&amp;#34;accessKeyId&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;secretKey&amp;#34;&lt;/span>) }, http.debug())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> projectName = &lt;span style="color:#a6e22e">ProjectName&lt;/span>.of(&lt;span style="color:#e6db74">&amp;#34;acme-service&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> featureName = &lt;span style="color:#a6e22e">FeatureName&lt;/span>.of(&lt;span style="color:#e6db74">&amp;#34;take-over-the-world&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// create project
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> client.createProject(projectName)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .onFailure { &lt;span style="color:#66d9ef">it&lt;/span>.reason.throwIt() }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// create feature
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> client.createFeature(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> project = projectName,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name = featureName,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> defaultVariation = &lt;span style="color:#a6e22e">VariationName&lt;/span>.of(&lt;span style="color:#e6db74">&amp;#34;bide-our-time&amp;#34;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> variations = mapOf(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">VariationName&lt;/span>.of(&lt;span style="color:#e6db74">&amp;#34;bide-our-time&amp;#34;&lt;/span>) to VariableValue(&lt;span style="color:#66d9ef">false&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">VariationName&lt;/span>.of(&lt;span style="color:#e6db74">&amp;#34;it-is-time&amp;#34;&lt;/span>) to VariableValue(&lt;span style="color:#66d9ef">true&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> entityOverrides = mapOf(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">EntityId&lt;/span>.of(&lt;span style="color:#e6db74">&amp;#34;test-subject-1&amp;#34;&lt;/span>) to &lt;span style="color:#a6e22e">VariationName&lt;/span>.of(&lt;span style="color:#e6db74">&amp;#34;it-is-time&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ).onFailure { &lt;span style="color:#66d9ef">it&lt;/span>.reason.throwIt() }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// evaluate feature
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> result = client.evaluateFeature(projectName, featureName, &lt;span style="color:#a6e22e">EntityId&lt;/span>.of(&lt;span style="color:#e6db74">&amp;#34;test-subject-2&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .onFailure { &lt;span style="color:#66d9ef">it&lt;/span>.reason.throwIt() }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println(result)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The client APIs utilise the &lt;code>http4k-platform-aws&lt;/code> module for request signing, which means no dependencies on the incredibly fat
Amazon-SDK JARs. This means this integration is perfect for running Serverless Lambdas where binary size is a
performance factor.&lt;/p></description></item><item><title>AWS: CloudWatchLogs</title><link>https://http4k.org/ecosystem/connect/reference/amazon/cloudwatchlogs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/connect/reference/amazon/cloudwatchlogs/</guid><description>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-connect-amazon-cloudwatchlogs&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-connect-amazon-cloudwatchlogs-fake&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The CloudWatchLogs connector provides the following Actions:&lt;/p>
&lt;ul>
&lt;li>CreateLogGroup&lt;/li>
&lt;li>CreateLogStream&lt;/li>
&lt;li>DeleteLogGroup&lt;/li>
&lt;li>DeleteLogStream&lt;/li>
&lt;li>FilterLogEvents&lt;/li>
&lt;li>PutLogEvents&lt;/li>
&lt;/ul>
&lt;p>The client APIs utilise the &lt;code>http4k-platform-aws&lt;/code> module for request signing, which means no dependencies on the incredibly fat
Amazon-SDK JARs. This means this integration is perfect for running Serverless Lambdas where binary size is a
performance factor.&lt;/p></description></item><item><title>AWS: Cognito</title><link>https://http4k.org/ecosystem/connect/reference/amazon/cognito/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/connect/reference/amazon/cognito/</guid><description>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-connect-amazon-cognito&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-connect-amazon-cognito-fake&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The Cognito connector provides the following Actions:&lt;/p>
&lt;ul>
&lt;li>AdminCreateUser&lt;/li>
&lt;li>AdminDeleteUser&lt;/li>
&lt;li>AdminDisableUser&lt;/li>
&lt;li>AdminEnableUser&lt;/li>
&lt;li>AdminGetUser&lt;/li>
&lt;li>AdminResetUserPassword&lt;/li>
&lt;li>AdminSetUserPassword&lt;/li>
&lt;li>AssociateSoftwareToken&lt;/li>
&lt;li>ConfirmForgotPassword&lt;/li>
&lt;li>CreateResourceServer&lt;/li>
&lt;li>CreateUserPool&lt;/li>
&lt;li>CreateUserPoolClient&lt;/li>
&lt;li>CreateUserPoolDomain&lt;/li>
&lt;li>DeleteUserPool&lt;/li>
&lt;li>DeleteUserPoolClient&lt;/li>
&lt;li>DeleteUserPoolDomain&lt;/li>
&lt;li>ForgotPassword&lt;/li>
&lt;li>GetJwks&lt;/li>
&lt;li>ListUserPools&lt;/li>
&lt;li>InitiateAuth&lt;/li>
&lt;li>RespondToAuthChallenge&lt;/li>
&lt;li>VerifySoftwareToken&lt;/li>
&lt;/ul>
&lt;h2 id="-fake"># Fake&lt;/h2>
&lt;p>The Cognito Fake has very limited functionality for creating User Pools and User Pool Clients only.
It can act as an OAuthServer for created User Pool Clients. It supports the ClientCredentials and
Authorization Code grants and returns JWTs which have been signed with a private key. The matching public key can be
retrieved from the following endpoint:&lt;/p></description></item><item><title>AWS: Container Credentials</title><link>https://http4k.org/ecosystem/connect/reference/amazon/containercredentials/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/connect/reference/amazon/containercredentials/</guid><description>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-connect-amazon-containercredentials&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-connect-amazon-containercredentials-fake&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The Container Credentials connector provides the following Actions:&lt;/p>
&lt;pre>&lt;code> * GetCredentials
&lt;/code>&lt;/pre>
&lt;p>The client APIs utilise the &lt;code>http4k-platform-aws&lt;/code> module for request signing, which means no dependencies on the incredibly fat
Amazon-SDK JARs. This means this integration is perfect for running Serverless Lambdas where binary size is a
performance factor.&lt;/p></description></item><item><title>AWS: DynamoDb</title><link>https://http4k.org/ecosystem/connect/reference/amazon/dynamodb/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/connect/reference/amazon/dynamodb/</guid><description>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-connect-amazon-dynamodb&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-connect-amazon-dynamodb-fake&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The DynamoDb connector provides the following Actions:&lt;/p>
&lt;pre>&lt;code>* CreateTable
* DeleteTable
* DescribeTable
* ListTables
* UpdateTable
* DeleteItem
* GetItem
* PutItem
* Query
* Scan
* UpdateItem
* TransactGetItems
* TransactWriteItems
* BatchGetItem
* BatchWriteItem
* ExecuteTransaction
* ExecuteStatement
* BatchExecuteStatement
&lt;/code>&lt;/pre>
&lt;p>Note that the FakeDynamo supports the majority of the Dynamo operations with the following exceptions. You can use &lt;a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DynamoDBLocal.DownloadingAndRunning.html">DynamoDB&lt;/a> local instead to provide these functions:&lt;/p></description></item><item><title>AWS: EventBridge</title><link>https://http4k.org/ecosystem/connect/reference/amazon/eventbridge/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/connect/reference/amazon/eventbridge/</guid><description>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-connect-amazon-eventbridge&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-connect-amazon-eventbridge-fake&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The EventBridge connector provides the following Actions:
* CreateEventBus
* DeleteEventBus
* DescribeEventBus
* PutEvents&lt;/p></description></item><item><title>AWS: Firehose</title><link>https://http4k.org/ecosystem/connect/reference/amazon/firehose/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/connect/reference/amazon/firehose/</guid><description>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-connect-amazon-firehose&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-connect-amazon-firehose-fake&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The Firehose connector provides the following Actions:
* CreateDeliveryStream
* DeleteDeliveryStream
* ListDeliveryStreams
* PutRecord
* PutRecordBatch&lt;/p></description></item><item><title>AWS: IAM Identity Center</title><link>https://http4k.org/ecosystem/connect/reference/amazon/iamidentitycenter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/connect/reference/amazon/iamidentitycenter/</guid><description>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-connect-amazon-iamidentitycenter&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-connect-amazon-iamidentitycenter-fake&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The IAMIdentityCenter connector provides the following Fakes:&lt;/p>
&lt;h2 id="oidc">OIDC&lt;/h2>
&lt;p>Actions:&lt;/p>
&lt;ul>
&lt;li>RegisterClient&lt;/li>
&lt;li>StartDeviceAuthentication&lt;/li>
&lt;li>CreateToken&lt;/li>
&lt;/ul>
&lt;h3 id="default-fake-port-34160">Default Fake port: 34160&lt;/h3>
&lt;p>To start:&lt;/p></description></item><item><title>AWS: Instance Metadata Service</title><link>https://http4k.org/ecosystem/connect/reference/amazon/instancemetadata/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/connect/reference/amazon/instancemetadata/</guid><description>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-connect-amazon-instancemetadata&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-connect-amazon-instancemetadata-fake&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html">Instance Metadata Service&lt;/a> V1 connector provides the following Actions:&lt;/p>
&lt;pre>&lt;code> * GetAmiId
 * GetHostName
 * GetInstanceIdentityDocument
 * GetInstanceType
 * GetLocalHostName
 * GetLocalIpv4
 * GetPublicHostName
 * GetPublicIpv4
 * GetSecurityCredentials
 * ListSecurityCredentials
&lt;/code>&lt;/pre>
&lt;h3 id="example-usage">Example usage&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> USE_REAL_CLIENT = &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// we can connect to the real service or the fake (drop in replacement)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> http: HttpHandler = &lt;span style="color:#66d9ef">if&lt;/span> (USE_REAL_CLIENT) JavaHttpClient() &lt;span style="color:#66d9ef">else&lt;/span> FakeInstanceMetadataService()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// create a client
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> client = &lt;span style="color:#a6e22e">InstanceMetadataService&lt;/span>.Http(http.debug())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// get local ip address
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> localIp = client.getLocalIpv4()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println(localIp)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// get identity document
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> identityDocument = client.getInstanceIdentityDocument()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println(identityDocument)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="credentials-provider">Credentials Provider&lt;/h3>
&lt;p>The Instance Metadata Service also offers a &lt;code>CredentialsProvider&lt;/code>.
If the application is running inside an Amazon EC2 environment,
this provider can authorize AWS requests using credentials from the instance profile.&lt;/p></description></item><item><title>AWS: KMS</title><link>https://http4k.org/ecosystem/connect/reference/amazon/kms/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/connect/reference/amazon/kms/</guid><description>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-connect-amazon-kms&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-connect-amazon-kms-fake&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The KMS connector provides the following Actions:&lt;/p>
&lt;pre>&lt;code> * CreateKey
 * DescribeKey
 * Decrypt
 * Encrypt
 * GetPublicKey
 * ListKeys
 * ScheduleKeyDeletion
 * Sign
 * Verify
&lt;/code>&lt;/pre>
&lt;h3 id="example-usage">Example usage&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> USE_REAL_CLIENT = &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// we can connect to the real service or the fake (drop in replacement)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> http: HttpHandler = &lt;span style="color:#66d9ef">if&lt;/span>(USE_REAL_CLIENT) JavaHttpClient() &lt;span style="color:#66d9ef">else&lt;/span> FakeKMS()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// create a client
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> client = &lt;span style="color:#a6e22e">KMS&lt;/span>.Http(&lt;span style="color:#a6e22e">Region&lt;/span>.of(&lt;span style="color:#e6db74">&amp;#34;us-east-1&amp;#34;&lt;/span>), { AwsCredentials(&lt;span style="color:#e6db74">&amp;#34;accessKeyId&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;secretKey&amp;#34;&lt;/span>) }, http.debug())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// all operations return a Result monad of the API type
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> createdKeyResult: Result&amp;lt;KeyCreated, RemoteFailure&amp;gt; = client.createKey(ECC_NIST_P384, ENCRYPT_DECRYPT)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> key: KeyCreated = createdKeyResult.valueOrNull()&lt;span style="color:#f92672">!!&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println(key)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// we can encrypt some text...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> encrypted: Encrypted = client.encrypt(keyId = key.&lt;span style="color:#a6e22e">KeyMetadata&lt;/span>.KeyId, Base64Blob.encoded(&lt;span style="color:#e6db74">&amp;#34;hello&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .valueOrNull()&lt;span style="color:#f92672">!!&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println(encrypted.&lt;span style="color:#a6e22e">CiphertextBlob&lt;/span>.decoded())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// and decrypt it again!
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> decrypted: Decrypted = client.decrypt(keyId = key.&lt;span style="color:#a6e22e">KeyMetadata&lt;/span>.KeyId, encrypted.CiphertextBlob).valueOrNull()&lt;span style="color:#f92672">!!&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println(decrypted.&lt;span style="color:#a6e22e">Plaintext&lt;/span>.decoded())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The client APIs utilise the &lt;code>http4k-platform-aws&lt;/code> module for request signing, which means no dependencies on the incredibly fat
Amazon-SDK JARs. This means this integration is perfect for running Serverless Lambdas where binary size is a
performance factor.&lt;/p></description></item><item><title>AWS: Lambda</title><link>https://http4k.org/ecosystem/connect/reference/amazon/lambda/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/connect/reference/amazon/lambda/</guid><description>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-connect-amazon-lambda&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-connect-amazon-lambda-fake&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The Lambda connector provides the following Actions:&lt;/p>
&lt;pre>&lt;code> * InvokeFunction
&lt;/code>&lt;/pre>
&lt;h3 id="example-usage">Example usage&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> USE_REAL_CLIENT = &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> deployedLambda = FunctionName(&lt;span style="color:#e6db74">&amp;#34;http4kLambda&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> fakeLambda = FakeLambda(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> deployedLambda to { req: Request &lt;span style="color:#f92672">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> request = &lt;span style="color:#a6e22e">Moshi&lt;/span>.asA&amp;lt;Req&amp;gt;(req.bodyString())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Response(OK)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .body(&lt;span style="color:#a6e22e">Moshi&lt;/span>.asFormatString(Resp(request.&lt;span style="color:#66d9ef">value&lt;/span>)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// we can connect to the real service or the fake (drop in replacement)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> http: HttpHandler = &lt;span style="color:#66d9ef">if&lt;/span> (USE_REAL_CLIENT) JavaHttpClient() &lt;span style="color:#66d9ef">else&lt;/span> fakeLambda
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// create a client
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> client = &lt;span style="color:#a6e22e">Lambda&lt;/span>.Http(&lt;span style="color:#a6e22e">Region&lt;/span>.of(&lt;span style="color:#e6db74">&amp;#34;us-east-1&amp;#34;&lt;/span>), { AwsCredentials(&lt;span style="color:#e6db74">&amp;#34;accessKeyId&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;secretKey&amp;#34;&lt;/span>) }, http.debug())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// all operations return a Result monad of the API type
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> invokeResult: Result&amp;lt;Resp, RemoteFailure&amp;gt; = client.invokeFunction(deployedLambda, Req(&lt;span style="color:#e6db74">&amp;#34;hello&amp;#34;&lt;/span>), Moshi)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println(invokeResult)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note that the http4k-connect Fake Lambda implementation is designed to provide a runtime environment for function
HttpHandlers that will be invoked directly using the Lambda URL
pattern (&lt;code>https://lambda.${scope.region}.amazonaws.com/2015-03-31/functions/$name/invocations&lt;/code>), rather than being
deployed behind APIGateway (where you have total control over the URL pattern where the lambda can be invoked).&lt;/p></description></item><item><title>AWS: S3</title><link>https://http4k.org/ecosystem/connect/reference/amazon/s3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/connect/reference/amazon/s3/</guid><description>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-connect-amazon-s3&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-connect-amazon-s3-fake&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The S3 connector consists of 2 interfaces:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>S3&lt;/code> for global operations, providing the following Actions:&lt;/p></description></item><item><title>AWS: Secrets Manager</title><link>https://http4k.org/ecosystem/connect/reference/amazon/secretsmanager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/connect/reference/amazon/secretsmanager/</guid><description>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-connect-amazon-secretsmanager&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-connect-amazon-secretsmanager-fake&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The Secrets Manager connector provides the following Actions:&lt;/p>
&lt;pre>&lt;code> * CreateSecret
 * DeleteSecret
 * GetSecretValue
 * ListSecrets
 * PutSecretValue
 * UpdateSecret
&lt;/code>&lt;/pre>
&lt;h3 id="example-usage">Example usage&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> USE_REAL_CLIENT = &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// we can connect to the real service or the fake (drop in replacement)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> http: HttpHandler = &lt;span style="color:#66d9ef">if&lt;/span> (USE_REAL_CLIENT) JavaHttpClient() &lt;span style="color:#66d9ef">else&lt;/span> FakeSecretsManager()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// create a client
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> client =
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">SecretsManager&lt;/span>.Http(&lt;span style="color:#a6e22e">Region&lt;/span>.of(&lt;span style="color:#e6db74">&amp;#34;us-east-1&amp;#34;&lt;/span>), { AwsCredentials(&lt;span style="color:#e6db74">&amp;#34;accessKeyId&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;secretKey&amp;#34;&lt;/span>) }, http.debug())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> secretId = &lt;span style="color:#a6e22e">SecretId&lt;/span>.of(&lt;span style="color:#e6db74">&amp;#34;a-secret-id&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// all operations return a Result monad of the API type
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> createdSecretResult: Result&amp;lt;CreatedSecret, RemoteFailure&amp;gt; =
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> client.createSecret(secretId.&lt;span style="color:#66d9ef">value&lt;/span>, &lt;span style="color:#a6e22e">UUID&lt;/span>.randomUUID(), &lt;span style="color:#e6db74">&amp;#34;value&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println(createdSecretResult.valueOrNull())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// get the secret value back
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> println(client.getSecretValue(secretId).valueOrNull())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The client APIs utilise the &lt;code>http4k-platform-aws&lt;/code> module for request signing, which means no dependencies on the incredibly fat
Amazon-SDK JARs. This means this integration is perfect for running Serverless Lambdas where binary size is a
performance factor.&lt;/p></description></item><item><title>AWS: Security Token Service</title><link>https://http4k.org/ecosystem/connect/reference/amazon/sts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/connect/reference/amazon/sts/</guid><description>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-connect-amazon-sts&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-connect-amazon-sts-fake&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The STS connector provides the following Actions:&lt;/p>
&lt;pre>&lt;code> * AssumeRole
 * AssumeRoleWithWebIdentity
&lt;/code>&lt;/pre>
&lt;p>The client APIs utilise the &lt;code>http4k-platform-aws&lt;/code> module for request signing, which means no dependencies on the incredibly fat
Amazon-SDK JARs. This means this integration is perfect for running Serverless Lambdas where binary size is a
performance factor.&lt;/p></description></item><item><title>AWS: Simple Email Service</title><link>https://http4k.org/ecosystem/connect/reference/amazon/ses/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/connect/reference/amazon/ses/</guid><description>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-connect-amazon-ses&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-connect-amazon-ses-fake&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The SES connector provides the following Actions:&lt;/p>
&lt;ul>
&lt;li>SendEmail&lt;/li>
&lt;/ul>
&lt;p>The client APIs utilise the &lt;code>http4k-platform-aws&lt;/code> module for request signing, which means no dependencies on the incredibly fat
Amazon-SDK JARs. This means this integration is perfect for running Serverless Lambdas where binary size is a
performance factor.&lt;/p></description></item><item><title>AWS: Simple Notification Service</title><link>https://http4k.org/ecosystem/connect/reference/amazon/sns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/connect/reference/amazon/sns/</guid><description>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-connect-amazon-sns&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-connect-amazon-sns-fake&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The SNS connector provides the following Actions:&lt;/p>
&lt;ul>
&lt;li>CreateTopic&lt;/li>
&lt;li>DeleteTopic&lt;/li>
&lt;li>ListTopics&lt;/li>
&lt;li>Publish&lt;/li>
&lt;li>PublishBatch&lt;/li>
&lt;/ul>
&lt;p>The client APIs utilise the &lt;code>http4k-platform-aws&lt;/code> module for request signing, which means no dependencies on the incredibly fat
Amazon-SDK JARs. This means this integration is perfect for running Serverless Lambdas where binary size is a
performance factor.&lt;/p></description></item><item><title>AWS: Simple Queue Service</title><link>https://http4k.org/ecosystem/connect/reference/amazon/sqs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/connect/reference/amazon/sqs/</guid><description>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-connect-amazon-sqs&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-connect-amazon-sqs-fake&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The SQS connector provides the following Actions:&lt;/p>
&lt;pre>&lt;code> * CreateQueue
 * DeleteMessage
 * DeleteQueue
 * GetQueueAttributes
 * ListQueues
 * ReceiveMessage
 * SendMessage
&lt;/code>&lt;/pre>
&lt;p>The client APIs utilise the &lt;code>http4k-platform-aws&lt;/code> module for request signing, which means no dependencies on the incredibly fat
Amazon-SDK JARs. This means this integration is perfect for running Serverless Lambdas where binary size is a
performance factor.&lt;/p></description></item><item><title>AWS: Systems Manager</title><link>https://http4k.org/ecosystem/connect/reference/amazon/systemsmanager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/connect/reference/amazon/systemsmanager/</guid><description>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-connect-amazon-systemsmanager&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-connect-amazon-systemsmanager-fake&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The Systems Manager connector provides the following Actions:&lt;/p>
&lt;pre>&lt;code> * DeleteParameter
 * GetParameter
 * PutParameter
&lt;/code>&lt;/pre>
&lt;h3 id="example-usage">Example usage&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> USE_REAL_CLIENT = &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> paramName = &lt;span style="color:#a6e22e">SSMParameterName&lt;/span>.of(&lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// we can connect to the real service or the fake (drop in replacement)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> http: HttpHandler = &lt;span style="color:#66d9ef">if&lt;/span> (USE_REAL_CLIENT) JavaHttpClient() &lt;span style="color:#66d9ef">else&lt;/span> FakeSystemsManager()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// create a client
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> client =
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">SystemsManager&lt;/span>.Http(&lt;span style="color:#a6e22e">Region&lt;/span>.of(&lt;span style="color:#e6db74">&amp;#34;us-east-1&amp;#34;&lt;/span>), { AwsCredentials(&lt;span style="color:#e6db74">&amp;#34;accessKeyId&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;secretKey&amp;#34;&lt;/span>) }, http.debug())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// all operations return a Result monad of the API type
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> putParameterResult: Result&amp;lt;PutParameterResult, RemoteFailure&amp;gt; =
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> client.putParameter(paramName, &lt;span style="color:#e6db74">&amp;#34;value&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">ParameterType&lt;/span>.String)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println(putParameterResult)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// get the parameter back again
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> println(client.getParameter(paramName))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The client APIs utilise the &lt;code>http4k-platform-aws&lt;/code> module for request signing, which means no dependencies on the incredibly fat
Amazon-SDK JARs. This means this integration is perfect for running Serverless Lambdas where binary size is a
performance factor.&lt;/p></description></item><item><title>Changelog</title><link>https://http4k.org/ecosystem/changelog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/changelog/</guid><description/></item><item><title>Client as a function</title><link>https://http4k.org/howto/client_as_a_function/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/howto/client_as_a_function/</guid><description>&lt;p>This example demonstrates using http4k as a client, to consume HTTP services. A client is just another HttpHandler.&lt;/p>
&lt;h3 id="gradle-setup">Gradle setup&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-core&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="code">Code&lt;/h3>




&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">package&lt;/span> content.howto.client_as_a_function
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.client.JavaHttpClient
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.HttpHandler
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.Method
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.Request
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> request = Request(&lt;span style="color:#a6e22e">Method&lt;/span>.GET, &lt;span style="color:#e6db74">&amp;#34;https://xkcd.com/info.0.json&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> client: HttpHandler = JavaHttpClient()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println(client(request))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Clients</title><link>https://http4k.org/ecosystem/http4k/reference/clients/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/http4k/reference/clients/</guid><description>&lt;h3 id="installation-gradle">Installation (Gradle)&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Java (for development only):
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-core&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Apache v5 (Sync): 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-client-apache&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Apache v4 (Sync): 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-client-apache4&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Apache v5 (Async): 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-client-apache-async&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Apache v4 (Async): 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-client-apache4-async&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Fuel (Sync + Async): 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-client-fuel&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Helidon (Loom): 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-client-helidon&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Jetty (Sync + Async + WebSocket): 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-client-jetty&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// OkHttp (Sync + Async): 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-client-okhttp&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Websocket: 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-client-websocket&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="http">HTTP&lt;/h3>
&lt;p>Supported HTTP client adapter APIs are wrapped to provide an &lt;code>HttpHandler&lt;/code> interface in 1 LOC.
Since each client acts as an &lt;code>HttpHandler&lt;/code>, it can be decorated with various &lt;code>Filter&lt;/code> implementations, such as those available in &lt;code>ClientFilters&lt;/code>.
This allows handling cross-cutting concerns independently of a specific client implementation, greatly facilitating testing.&lt;/p></description></item><item><title>Company</title><link>https://http4k.org/company/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/company/</guid><description>&lt;p>Founded in 2017, http4k has grown into one of the most popular HTTP libraries for Kotlin, reflecting over 15 years of
combined experience in server-side development. Our mission was to create a library that embodies simplicity and
clarity, enabling developers to build robust applications without the complexities often associated with traditional
frameworks.&lt;/p></description></item><item><title>Config</title><link>https://http4k.org/ecosystem/http4k/reference/config/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/http4k/reference/config/</guid><description>&lt;h3 id="installation-gradle">Installation (Gradle)&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-config&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>http4k applications are naturally at home operating in distributed, Cloud Native environments. Whilst simple to create, this module
provides requisite tooling to get apps up and running with the minimum of effort to enable the following operational aspects:&lt;/p></description></item><item><title>Configure an OAuth_Server</title><link>https://http4k.org/howto/configure_an_oauth_server/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/howto/configure_an_oauth_server/</guid><description>&lt;h3 id="gradle-setup">Gradle setup&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-core&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-security-oauth&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>For this example, you need to configure &lt;code>OAuthServer&lt;/code> instance with the correct implementations of your login pages, generation of authentication codes and access tokens.&lt;/p></description></item><item><title>Consulting</title><link>https://http4k.org/consulting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/consulting/</guid><description>&lt;p>Unlock the full potential of your applications with consulting services directly from the architects of &lt;strong>http4k&lt;/strong>. We provide tailored guidance and support at every stage of your journey through the http4k ecosystem.&lt;/p></description></item><item><title>Contributor Covenant Code of Conduct</title><link>https://http4k.org/code-of-conduct/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/code-of-conduct/</guid><description>&lt;h2 id="our-pledge">Our Pledge&lt;/h2>
&lt;p>We as members, contributors, and leaders pledge to make participation in our
community a harassment-free experience for everyone, regardless of age, body
size, visible or invisible disability, ethnicity, sex characteristics, gender
identity and expression, level of experience, education, socio-economic status,
nationality, personal appearance, race, religion, or sexual identity
and orientation.&lt;/p></description></item><item><title>Contributors Guide</title><link>https://http4k.org/ecosystem/contributing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/contributing/</guid><description/></item><item><title>Create a custom JSON marshaller</title><link>https://http4k.org/howto/create_a_custom_json_marshaller/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/howto/create_a_custom_json_marshaller/</guid><description>&lt;h3 id="gradle-setup">Gradle setup&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-core&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-format-jackson&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="custom-auto-mapping-json-configurations">Custom auto-mapping JSON configurations&lt;/h3>
&lt;p>&lt;strong>http4k&lt;/strong> declares an extended set of &amp;ldquo;primitive&amp;rdquo; types which it can marshall out of the box - this includes the
various http4k primitives (Uri, Status), as well as a bunch of common types from the JDK such as the DateTime classes
and Exceptions. These primitives types cannot be marshalled as top-level JSON structures on their own so should be
contained in a custom wrapper class before transmission.&lt;/p></description></item><item><title>Customise a Server backend</title><link>https://http4k.org/howto/customise_a_server_backend/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/howto/customise_a_server_backend/</guid><description>&lt;h3 id="how-to-write-a-custom-server-implmentation">How to write a custom server implmentation&lt;/h3>
&lt;p>Whilst the http4k server modules ship with a sensibly configured standard server-backend setup, a lot of projects will require specialised implementations of the underlying server backend. http4k makes this easy with the &lt;code>ServerConfig&lt;/code> interface.&lt;/p></description></item><item><title>Deploy WebJars</title><link>https://http4k.org/howto/deploy_webjars/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/howto/deploy_webjars/</guid><description>&lt;h3 id="gradle-setup">Gradle setup&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-core&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// for the example...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.webjars:swagger-ui&amp;#34;&lt;/span>, version = &lt;span style="color:#e6db74">&amp;#34;3.43.0&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="https://www.webjars.org/">WebJars&lt;/a> is a library to ship pre-packaged Web assets on your classpath by just adding the dependency. The assets are rehoused under the META-INF directory and end up with URLs such as:&lt;/p></description></item><item><title>Developer Training</title><link>https://http4k.org/training/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/training/</guid><description>&lt;p>The &lt;strong>http4k&lt;/strong> project is a culmination of work on real-world projects in many different industries. Whilst the library is designed to be simple to learn and use, there are many advantages to learning from our mistakes when using it! To this end, the team have developed a significant amount of training materials which can be used to give teams new to &lt;strong>http4k&lt;/strong> the best possible start, especially around the following areas:&lt;/p></description></item><item><title>Disclaimer</title><link>https://http4k.org/disclaimer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/disclaimer/</guid><description>&lt;p>Last updated: 2024-05-20&lt;/p>
&lt;p>&lt;strong>WEBSITE DISCLAIMER&lt;/strong>&lt;/p>
&lt;p>The information provided by &lt;strong>http4k Ltd&lt;/strong> (“Company”, “we”, “our”, “us”) on &lt;strong>http4k.org&lt;/strong> (the “Site”) is for general informational purposes only. All information on the Site is provided in good faith, however we make no representation or warranty of any kind, express or implied, regarding the accuracy, adequacy, validity, reliability, availability, or completeness of any information on the Site.&lt;/p></description></item><item><title>FAQ</title><link>https://http4k.org/faq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/faq/</guid><description>&lt;p>Find here answers to the most common questions that we get asked about http4k:&lt;/p>
&lt;h3 id="general">General&lt;/h3>
&lt;p>&lt;strong>Q. Is http4k a library or a framework?&lt;/strong>&lt;/p></description></item><item><title>Format: DataFrame</title><link>https://http4k.org/ecosystem/http4k/reference/dataframe/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/http4k/reference/dataframe/</guid><description>&lt;h3 id="installation-gradle">Installation (Gradle)&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-format-dataframe&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="about">About&lt;/h3>
&lt;p>This module adds the ability to use &lt;a href="https://kotlin.github.io/dataframe">Kotlin DataFrames&lt;/a> as a first-class citizen when reading from HTTP messages. Extraction from the HTTP message body is done automatically when using a lens with a DataFrame type.&lt;/p></description></item><item><title>Format: JSON</title><link>https://http4k.org/ecosystem/http4k/reference/json/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/http4k/reference/json/</guid><description>&lt;h3 id="installation-gradle">Installation (Gradle)&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Argo: 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-format-argo&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Gson: 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-format-gson&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Jackson: 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-format-jackson&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Klaxon: 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-format-klaxon&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// KondorJson: 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-format-kondor-json&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Moshi: 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-format-moshi&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// KotlinX Serialization: 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-format-kotlinx-serialization&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="about">About&lt;/h3>
&lt;p>These modules add the ability to use JSON as a first-class citizen when reading from and to HTTP messages. Each
implementation adds a set of standard methods and extension methods for converting common types into native JSON/XML
objects, including custom Lens methods for each library so that JSON node objects can be written and read directly from
HTTP messages:&lt;/p></description></item><item><title>Format: XML</title><link>https://http4k.org/ecosystem/http4k/reference/xml/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/http4k/reference/xml/</guid><description>&lt;h3 id="installation-gradle">Installation (Gradle)&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// json.org XML:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-format-xml&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Jackson XML:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-format-jackson-xml&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="about">About&lt;/h3>
&lt;p>These modules provide auto-marshalling functionality to convert XML into arbitrary data classes. The 2 differ slightly in their behaviour, due to the underlying libraries used for implementation. We recommend using &lt;code>http4k-format-jackson-xml&lt;/code> as it has more predictable and consistent behaviour.&lt;/p></description></item><item><title>Format: YAML</title><link>https://http4k.org/ecosystem/http4k/reference/yaml/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/http4k/reference/yaml/</guid><description>&lt;h3 id="installation-gradle">Installation (Gradle)&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-format-jackson-yaml&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-format-moshi-yaml&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="about">About&lt;/h3>
&lt;p>These modules add the ability to use YAML as a first-class citizen when reading from and to HTTP messages.&lt;/p></description></item><item><title>GitHub</title><link>https://http4k.org/ecosystem/connect/reference/github/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/connect/reference/github/</guid><description>&lt;p>The GitHub connector currently provides basic action interfaces and support for verifying webhook signatures only.&lt;/p>
&lt;h3 id="installation">Installation&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-connect-github&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>GitLab</title><link>https://http4k.org/ecosystem/connect/reference/gitlab/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/connect/reference/gitlab/</guid><description>&lt;p>The GitLab connector currently provides basic action interfaces.&lt;/p>
&lt;h4 id="installation">Installation&lt;/h4>
&lt;h3 id="installation-1">Installation&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-connect-gitlab&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Google: Analytics GA4</title><link>https://http4k.org/ecosystem/connect/reference/google/analytics-ga4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/connect/reference/google/analytics-ga4/</guid><description>&lt;h3 id="installation">Installation&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-connect-google-analytics-ga4&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-connect-google-analytics-ga4-fake&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The GA connector provides the following Actions:&lt;/p>
&lt;pre>&lt;code> * PageView
 * Event
&lt;/code>&lt;/pre>
&lt;h3 id="default-fake-port-35628">Default Fake port: 35628&lt;/h3>
&lt;p>To start:&lt;/p></description></item><item><title>Google: Analytics UA</title><link>https://http4k.org/ecosystem/connect/reference/google/analytics-ua/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/connect/reference/google/analytics-ua/</guid><description>&lt;h4 id="installation">Installation&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-connect-google-analytics-ua&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-connect-google-analytics-ua-fake&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The GA connector provides the following Actions:&lt;/p>
&lt;pre>&lt;code> * PageView
 * Event
&lt;/code>&lt;/pre>
&lt;h3 id="default-fake-port-35628">Default Fake port: 35628&lt;/h3>
&lt;p>To start:&lt;/p></description></item><item><title>Gradle KSP Plugin</title><link>https://http4k.org/ecosystem/connect/reference/ksp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/connect/reference/ksp/</guid><description>&lt;p>http4k-connect ships with a KSP plugin to automate the generation of the client extension-methods that accompany each Connect client. This allows you to skip creating
those extensions manually and maintain the API of the client appears to contain methods for each Action.&lt;/p></description></item><item><title>HTTP</title><link>https://http4k.org/ecosystem/http4k/concepts/http/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/http4k/concepts/http/</guid><description>&lt;p>HTTP application use-cases are the original and primary focus of &lt;strong>http4k&lt;/strong>. Based on the &lt;a href="https://monkey.org/~marius/funsrv.pdf">Server as a Function&lt;/a> concept, http4k provides a set of function types which can be used to write, test and deploy HTTP applications with simplicity and ease.&lt;/p></description></item><item><title>http4k Enterprise Edition</title><link>https://http4k.org/enterprise/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/enterprise/</guid><description>&lt;p>The &lt;strong>http4k Enterprise Edition (EE)&lt;/strong> subscription delivers long-term stability and support for organisations running critical production workloads using http4k technologies.&lt;/p></description></item><item><title>Implement your own clients</title><link>https://http4k.org/howto/implement-your-own-clients/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/howto/implement-your-own-clients/</guid><description>&lt;p>It is very easy to implement your own clients to follow the pattern. For the system &lt;code>MySystem&lt;/code>, you would need to:&lt;/p></description></item><item><title>Integrate with OpenAPI</title><link>https://http4k.org/howto/integrate_with_openapi/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/howto/integrate_with_openapi/</guid><description>&lt;p>This contract example shows:&lt;/p>
&lt;ul>
&lt;li>2 endpoints with typesafe contracts (marshalling of path parameters and bodies)&lt;/li>
&lt;li>Custom filters (reporting latency)&lt;/li>
&lt;li>API key security via a typesafe Query parameter (this can be a header or a body parameter as well)&lt;/li>
&lt;li>A parameter lens that provides metadata for the output OpenApi schema node&lt;/li>
&lt;li>OpenApi v3 documentation - Run this example and point a browser &lt;a href="https://http4k.org/openapi3?url=http%3A%2F%2Flocalhost%3A8000%2Fcontext%2Fdocs%2Fopenapi.json">here&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="gradle-setup">Gradle setup&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-core&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-api-openapi&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-format-argo&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note: although we use Argo here as our JSON API, you could also switch in any of the &lt;code>http4k-format-xxx&lt;/code> JSON modules.&lt;/p></description></item><item><title>Kafka: Rest Proxy</title><link>https://http4k.org/ecosystem/connect/reference/kafka/rest/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/connect/reference/kafka/rest/</guid><description>&lt;h4 id="installation">Installation&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-connect-kafka-rest&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-connect-kafka-rest-fake&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>There are 2 distinct APIs in the Rest proxy:&lt;/p>
&lt;h2 id="v2">v2&lt;/h2>
&lt;p>The main &lt;code>KafkaRest&lt;/code> connector provides the following v2 Actions:&lt;/p></description></item><item><title>Kafka: Schema Registry</title><link>https://http4k.org/ecosystem/connect/reference/kafka/schemaregistry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/connect/reference/kafka/schemaregistry/</guid><description>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-connect-kafka-schemaregistry&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-connect-kafka-schemaregistry-fake&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The main &lt;code>SchemaRegistry&lt;/code> connector provides the following Actions:&lt;/p>
&lt;ul>
&lt;li>CheckSchemaRegistered&lt;/li>
&lt;li>GetSchemaById&lt;/li>
&lt;li>GetSubjects&lt;/li>
&lt;li>GetSubjectVersion&lt;/li>
&lt;li>GetSubjectVersions&lt;/li>
&lt;li>RegisterSchema&lt;/li>
&lt;/ul>
&lt;h2 id="fake">Fake&lt;/h2>
&lt;p>The Fake provides the above actions.&lt;/p></description></item><item><title>Lenses</title><link>https://http4k.org/ecosystem/http4k/concepts/lens/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/http4k/concepts/lens/</guid><description>&lt;p>Lenses provide typesafe parameter destructuring/construction of HTTP messages. Getting values from HTTP messages is one thing, but we want to ensure that those values are both present and valid. For this purpose, we can use a &lt;a href="https://www.schoolofhaskell.com/school/to-infinity-and-beyond/pick-of-the-week/basic-lensing">Lens&lt;/a>.&lt;/p></description></item><item><title>Leverage GraphQL</title><link>https://http4k.org/howto/leverage_graphql/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/howto/leverage_graphql/</guid><description>&lt;h3 id="gradle-setup">Gradle setup&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-core&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-api-graphql&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="code">Code&lt;/h3>




&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">package&lt;/span> content.howto.leverage_graphql
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> com.expediagroup.graphql.generator.SchemaGeneratorConfig
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> com.expediagroup.graphql.generator.TopLevelObject
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> com.expediagroup.graphql.generator.toSchema
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> graphql.ExecutionInput.Builder
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> graphql.GraphQL.newGraphQL
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.dataloader.DataLoaderFactory.newDataLoader
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.dataloader.DataLoaderRegistry
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.client.JavaHttpClient
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.client.asGraphQLHandler
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.Filter
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.HttpHandler
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.RequestContexts
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.Uri
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.then
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.with
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.filter.ServerFilters.InitialiseRequestContext
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.graphql.GraphQLRequest
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.graphql.GraphQLResponse
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.graphql.GraphQLWithContextHandler
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.lens.RequestContextKey
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.lens.RequestContextLens
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.routing.bind
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.routing.graphQL
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.routing.routes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.server.SunHttp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.server.asServer
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> java.util.concurrent.CompletableFuture.supplyAsync
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">object&lt;/span> &lt;span style="color:#a6e22e">UserDb&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> userDb = mutableListOf(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> User(id = &lt;span style="color:#ae81ff">1&lt;/span>, name = &lt;span style="color:#e6db74">&amp;#34;Jim&amp;#34;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> User(id = &lt;span style="color:#ae81ff">2&lt;/span>, name = &lt;span style="color:#e6db74">&amp;#34;Bob&amp;#34;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> User(id = &lt;span style="color:#ae81ff">3&lt;/span>, name = &lt;span style="color:#e6db74">&amp;#34;Sue&amp;#34;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> User(id = &lt;span style="color:#ae81ff">4&lt;/span>, name = &lt;span style="color:#e6db74">&amp;#34;Rita&amp;#34;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> User(id = &lt;span style="color:#ae81ff">5&lt;/span>, name = &lt;span style="color:#e6db74">&amp;#34;Charlie&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">search&lt;/span>(ids: List&amp;lt;Int&amp;gt;) = userDb.filter { ids.contains(&lt;span style="color:#66d9ef">it&lt;/span>.id) }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">delete&lt;/span>(ids: List&amp;lt;Int&amp;gt;) = userDb.removeIf { ids.contains(&lt;span style="color:#66d9ef">it&lt;/span>.id) }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">data&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">User&lt;/span>(&lt;span style="color:#66d9ef">val&lt;/span> id: Int, &lt;span style="color:#66d9ef">val&lt;/span> name: String)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">UserQueries&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">search&lt;/span>(params: Params) = &lt;span style="color:#a6e22e">UserDb&lt;/span>.search(params.ids)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">UserMutations&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">delete&lt;/span>(params: Params) = &lt;span style="color:#a6e22e">UserDb&lt;/span>.delete(params.ids)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">data&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Params&lt;/span>(&lt;span style="color:#66d9ef">val&lt;/span> ids: List&amp;lt;Int&amp;gt;)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">UserDbHandler&lt;/span> : GraphQLWithContextHandler&amp;lt;String&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> graphQL = newGraphQL(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> toSchema(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SchemaGeneratorConfig(supportedPackages = listOf(&lt;span style="color:#e6db74">&amp;#34;content.`how-to`.leverage_graphql&amp;#34;&lt;/span>)),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> listOf(TopLevelObject(UserQueries())),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> listOf(TopLevelObject(UserMutations()))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ).build()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> dataLoaderRegistry = DataLoaderRegistry().apply {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> register(&lt;span style="color:#e6db74">&amp;#34;USER_LOADER&amp;#34;&lt;/span>, newDataLoader { ids: List&amp;lt;Int&amp;gt; &lt;span style="color:#f92672">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> supplyAsync {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> UserQueries().search(Params(ids))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">override&lt;/span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">invoke&lt;/span>(payload: GraphQLRequest, user: String) = &lt;span style="color:#a6e22e">GraphQLResponse&lt;/span>.from(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> graphQL.execute(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Builder()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .query(payload.query)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .variables(payload.variables.orEmpty())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .dataLoaderRegistry(dataLoaderRegistry)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .graphQLContext(mapOf(&lt;span style="color:#e6db74">&amp;#34;user&amp;#34;&lt;/span> to user))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">App&lt;/span>(): HttpHandler {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> contexts = RequestContexts()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> user = &lt;span style="color:#a6e22e">RequestContextKey&lt;/span>.required&amp;lt;String&amp;gt;(contexts)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> InitialiseRequestContext(contexts)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .then(AddUserToContext(user))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .then(routes(&lt;span style="color:#e6db74">&amp;#34;/graphql&amp;#34;&lt;/span> bind graphQL(UserDbHandler(), user)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">AddUserToContext&lt;/span>(user: RequestContextLens&amp;lt;String&amp;gt;) = Filter { next &lt;span style="color:#f92672">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> next(&lt;span style="color:#66d9ef">it&lt;/span>.with(user of &lt;span style="color:#66d9ef">it&lt;/span>.method.toString()))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> App().asServer(SunHttp(&lt;span style="color:#ae81ff">6000&lt;/span>)).start()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> graphQLClient =
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> JavaHttpClient().asGraphQLHandler(&lt;span style="color:#a6e22e">Uri&lt;/span>.of(&lt;span style="color:#e6db74">&amp;#34;http://localhost:6000/graphql&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">runAndDisplay&lt;/span>(query: String) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println(graphQLClient(GraphQLRequest(query)).&lt;span style="color:#66d9ef">data&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> runAndDisplay(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;{
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> search(params: { ids: [1]}) {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> id
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> name
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">}&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> runAndDisplay(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> mutation {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> delete(params: { ids: [1]})
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> runAndDisplay(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;{
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> search(params: { ids: [1]}) {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> id
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> name
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">}&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Lookup a user principal</title><link>https://http4k.org/howto/lookup_a_user_principal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/howto/lookup_a_user_principal/</guid><description>&lt;h3 id="gradle-setup">Gradle setup&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-core&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>When authorising requests, it is common to need to store some credentials or a user principal object to be accessible by a further Filter or the eventual HttpHandler.&lt;/p></description></item><item><title>Make HTTP calls in parallel</title><link>https://http4k.org/howto/make_parallel_calls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/howto/make_parallel_calls/</guid><description>&lt;p>There are cases where an application needs to make multiple HTTP calls to other services as part of handling a particular request.
As a general rule-of-thumb, we recommend people to avoid &lt;a href="https://wiki.c2.com/?PrematureOptimization">premature optimisation&lt;/a>, however sometimes the quantity of calls or performance of other services demand those to be executed in parallel.&lt;/p></description></item><item><title>Make JSON Faster</title><link>https://http4k.org/howto/make_json_faster/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/howto/make_json_faster/</guid><description>&lt;p>The standard JSON format modules included in Http4k (like Jackson and Moshi) are good enough for most applications.
However there are scenarios where you may want to further optimize them for runtime performance,
or to achieve acceptable cold start times in serverless deployments.&lt;/p></description></item><item><title>Mattermost</title><link>https://http4k.org/ecosystem/connect/reference/mattermost/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/connect/reference/mattermost/</guid><description>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-connect-mattermost&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The Mattermost connector provides the following Actions:&lt;/p>
&lt;ul>
&lt;li>TriggerWebhook&lt;/li>
&lt;/ul>
&lt;h3 id="example-usage">Example usage&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> USE_REAL_CLIENT = &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> payloads = &lt;span style="color:#a6e22e">Storage&lt;/span>.InMemory&amp;lt;List&amp;lt;TriggerWebhookPayload&amp;gt;&amp;gt;()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// we can connect to the real service or the fake (drop in replacement)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> http: HttpHandler = &lt;span style="color:#66d9ef">if&lt;/span> (USE_REAL_CLIENT) JavaHttpClient() &lt;span style="color:#66d9ef">else&lt;/span> FakeMattermost(payloads)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// create a client
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> mattermost = &lt;span style="color:#a6e22e">Mattermost&lt;/span>.Http(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> baseUri = &lt;span style="color:#a6e22e">Uri&lt;/span>.of(&lt;span style="color:#e6db74">&amp;#34;https://mattermost.com&amp;#34;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> http = http.debug()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> payload = TriggerWebhookPayload(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> text = &lt;span style="color:#e6db74">&amp;#34;Hello world&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> iconUrl = &lt;span style="color:#e6db74">&amp;#34;http://icon.url&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// all operations return a Result monad of the API type
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> result: Result&amp;lt;String, RemoteFailure&amp;gt; = mattermost.triggerWebhook(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> key = &lt;span style="color:#a6e22e">UUID&lt;/span>.randomUUID().toString(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> payload = payload,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println(result)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println(payloads)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="default-fake-port-54786">Default Fake port: 54786&lt;/h3>
&lt;p>To start:&lt;/p></description></item><item><title>Monitor http4k</title><link>https://http4k.org/howto/monitor_http4k/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/howto/monitor_http4k/</guid><description>&lt;p>Measuring performance of application estate is crucial in today&amp;rsquo;s microservice world - it is crucial that dev-ops enabled teams can monitor, react and scale dynamically to changes in the runtime environment. However, because of the plethora of monitoring tools on the market, and because &lt;a href="https://github.com/http4k/http4k">&lt;strong>http4k&lt;/strong>&lt;/a> is a toolkit and not a complete &amp;ldquo;batteries included&amp;rdquo; framework, it provides a number of integration points to enable monitoring systems to be plugged in as required. Additionally, it is envisaged that users will probably want to provide their own implementations of the &lt;a href="https://github.com/http4k/http4k">&lt;strong>http4k&lt;/strong>&lt;/a> &lt;code>ServerConfig&lt;/code> classes (&lt;code>Jetty&lt;/code>, &lt;code>Undertow&lt;/code> etc..) so that tweaking and tuning to their exact requirements is accessible, instead of &lt;a href="https://github.com/http4k/http4k">&lt;strong>http4k&lt;/strong>&lt;/a> attempting to provide some generic configuration API to achieve it.&lt;/p></description></item><item><title>Multipart</title><link>https://http4k.org/ecosystem/http4k/reference/multipart/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/http4k/reference/multipart/</guid><description>&lt;h3 id="installation-gradle">Installation (Gradle)&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-multipart&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="about">About&lt;/h3>
&lt;p>Multipart form support for fields and files, including a set of lens extensions for fields/files.&lt;/p></description></item><item><title>Ops: Failsafe</title><link>https://http4k.org/ecosystem/http4k/reference/failsafe/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/http4k/reference/failsafe/</guid><description>&lt;h3 id="installation-gradle">Installation (Gradle)&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-ops-failsafe&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="about">About&lt;/h3>
&lt;p>This module provides a configurable Filter to provide fault tolerance (CircuitBreaking, RateLimiting, Retrying, Bulkheading, Timeouts etc.),
by integrating with the &lt;a href="https://failsafe.dev/">Failsafe&lt;/a> library.&lt;/p></description></item><item><title>Ops: Micrometer</title><link>https://http4k.org/ecosystem/http4k/reference/micrometer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/http4k/reference/micrometer/</guid><description>&lt;h3 id="installation-gradle">Installation (Gradle)&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-ops-micrometer&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="about">About&lt;/h3>
&lt;p>This module provides configurable Filters to provide metrics for http4k apps, plugging into the awesome &lt;a href="http://micrometer.io/">Micrometer&lt;/a> library.&lt;/p></description></item><item><title>Ops: OpenTelemetry</title><link>https://http4k.org/ecosystem/http4k/reference/opentelemetry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/http4k/reference/opentelemetry/</guid><description>&lt;h3 id="installation-gradle">Installation (Gradle)&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-ops-http4k-opentelemetry&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="about">About&lt;/h3>
&lt;p>This module provides configurable Filters to provide distributed tracing and metrics for http4k apps, plugging into the awesome &lt;a href="https://opentelemetry.io/">OpenTelemetry&lt;/a> APIs.&lt;/p></description></item><item><title>Ops: Resilience4J</title><link>https://http4k.org/ecosystem/http4k/reference/resilience4j/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/http4k/reference/resilience4j/</guid><description>&lt;h3 id="installation-gradle">Installation (Gradle)&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-ops-resilience4j&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="about">About&lt;/h3>
&lt;p>This module provides configurable Filters to provide CircuitBreaking, RateLimiting, Retrying and Bulkheading, by integrating with the awesome &lt;a href="http://resilience4j.github.io/resilience4j/">Resilience4J&lt;/a> library.&lt;/p></description></item><item><title>Our Community of Contributors</title><link>https://http4k.org/community/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/community/</guid><description/></item><item><title>Overview</title><link>https://http4k.org/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/overview/</guid><description>&lt;p>http4k is a Kotlin-based HTTP toolkit which is designed to be simple, lightweight, and easy to use. It is built on functional programming principles, and is designed to be testable and easy to reason about. Since it&amp;rsquo;s release it has been used in production by a vast number of companies, and has been used to build a wide range of applications, from simple microservices to complex distributed systems, garnered millions of downloads per month and powers several globally significant websites.&lt;/p></description></item><item><title>Performance</title><link>https://http4k.org/performance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/performance/</guid><description>&lt;p>The http4k server-backend modules provide a very thin adapter layer over the raw APIs of the underlying servers, so
generally performs at a very low overhead compared to the raw server.&lt;/p></description></item><item><title>Pimp your Connect API Clients with KSP!</title><link>https://http4k.org/howto/pimp-your-clients-with-ksp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/howto/pimp-your-clients-with-ksp/</guid><description>&lt;p>http4k-connect ships with a KSP plugin to automate the generation of the client extension-methods that accompany each Connect client. This allows you to skip creating
those extensions manually and maintain the API of the client appears to contain methods for each Action.&lt;/p></description></item><item><title>Platform: AWS</title><link>https://http4k.org/ecosystem/http4k/reference/aws/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/http4k/reference/aws/</guid><description>&lt;h3 id="installation-gradle">Installation (Gradle)&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-platform-aws&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="about">About&lt;/h3>
&lt;p>This module provides 2 things: a http4k compatible &lt;code>SdkHttpClient&lt;/code> and a super-simple AWS request signing functionality for talking to AWS services.&lt;/p></description></item><item><title>Platform: Azure</title><link>https://http4k.org/ecosystem/http4k/reference/azure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/http4k/reference/azure/</guid><description>&lt;h3 id="installation-gradle">Installation (Gradle)&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-platform-azure&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="about">About&lt;/h3>
&lt;p>This module provides a http4k compatible &lt;code>HttpClient&lt;/code> so you can http4k-ise your use of the standard Azure SDKs libraries by plugging in a standard &lt;code>HttpHandler&lt;/code>. This simplifies fault testing and means that you can print out the exact traffic which is going to Azure - which is brilliant for both debugging and writing Fakes. :)&lt;/p></description></item><item><title>Platform: GCP</title><link>https://http4k.org/ecosystem/http4k/reference/gcp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/http4k/reference/gcp/</guid><description>&lt;h3 id="installation-gradle">Installation (Gradle)&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-platform-gcp&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="about">About&lt;/h3>
&lt;p>This module provides a http4k compatible &lt;code>HttpClient&lt;/code> so you can http4k-ise your use of the standard GCP SDKs libraries by plugging in a standard &lt;code>HttpHandler&lt;/code>. This simplifies fault testing and means that you can print out the exact traffic which is going to Azure - which is brilliant for both debugging and writing Fakes. :)&lt;/p></description></item><item><title>Platform: K8S</title><link>https://http4k.org/ecosystem/http4k/reference/k8s/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/http4k/reference/k8s/</guid><description>&lt;h3 id="installation-gradle">Installation (Gradle)&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-platform-k8s&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>http4k applications are naturally at home operating in distributed, Kubernetes (k8s) environments. Whilst simple to create, this module
provides requisite tooling to get apps up and running with the minimum of effort to enable the following operational aspects:&lt;/p></description></item><item><title>Pricing</title><link>https://http4k.org/pricing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/pricing/</guid><description>&lt;style>
 .pricing-container {
 font-family: 'Inter', sans-serif;
 padding: 2rem;
 background: white;
 }

 .pricing-grid {
 display: flex;
 gap: 24px;
 justify-content: center;
 }

 .pricing-plan {
 flex: 1;
 background: white;
 border-radius: 12px;
 padding: 32px;
 text-align: center;
 border: 1px solid #E5E7EB;
 transition: all 0.3s ease;
 display: flex;
 flex-direction: column;
 }

 .pricing-plan:hover {
 box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1);
 transform: translateY(-4px);
 }

 .pricing-plan.highlighted {
 box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1);
 border: 2px solid #7C76BB;
 }

 .highlight-icon {
 color: #d2c512;
 font-weight: bold;
 padding-right: 0.5em;
 }

 .check-icon {
 color: #10b981;
 font-weight: bold;
 padding-right: 0.5em;
 }

 .plan-name {
 font-size: 20px;
 font-weight: 700;
 margin-bottom: 16px;
 text-transform: uppercase;
 }

 .perfect-for {
 color: #6B7280;
 font-size: 14px;
 margin-bottom: 24px;
 min-height: 42px;
 }

 .pricing-details {
 min-height: 120px;
 }

 .plan-price {
 margin-bottom: 8px;
 }

 .price-amount {
 font-size: 48px;
 font-weight: 700;
 }

 .price-currency {
 font-size: 24px;
 vertical-align: super;
 }

 .price-period {
 color: #6B7280;
 font-size: 14px;
 margin-top: 4px;
 }

 .btn {
 display: inline-block;
 padding: 12px 24px;
 border-radius: 6px;
 font-weight: 600;
 text-decoration: none;
 transition: all 0.2s ease;
 text-align: center;
 }

 .btn-primary {
 background: #7C76BB;
 color: white;
 border: 2px solid #7C76BB;
 }

 .btn-primary:hover {
 background: #6661a6;
 border-color: #6661a6;
 }

 .btn-outline {
 background: transparent;
 color: #7C76BB;
 border: 2px solid #7C76BB;
 }

 .btn-outline:hover {
 background: #7C76BB;
 color: white;
 }

 .features-list {
 text-align: left;
 flex-grow: 1;
 }

 .feature-item {
 margin: 16px 0;
 display: flex;
 align-items: center;
 gap: 8px;
 color: #374151;
 }

 .cta-wrapper {
 margin-top: auto;
 padding-top: 24px;
 }

 .footnotes {
 margin-top: 32px;
 padding: 24px;
 background: #F9FAFB;
 border-radius: 12px;
 font-size: 14px;
 line-height: 1.6;
 }

 .footnote-item {
 display: block;
 color: #6B7280;
 margin-bottom: 16px;
 }

 .footnote-item:last-child {
 margin-bottom: 0;
 }

 .footnote-marker {
 color: #7C76BB;
 font-weight: 600;
 margin-right: 4px;
 }

 @media (max-width: 1024px) {
 .pricing-grid {
 flex-direction: column;
 }
 }
&lt;/style>

&lt;div class="pricing-container">
 &lt;div class="pricing-grid">
 
 &lt;div class="pricing-plan">
 &lt;div class="plan-name">Community Edition&lt;/div>
 &lt;div class="perfect-for">
 Full-featured core platform - powers systems at any scale
 &lt;/div>
 &lt;div class="pricing-details">
 &lt;div class="plan-price">
 &lt;span class="price-currency">$&lt;/span>
 &lt;span class="price-amount">0&lt;/span>
 &lt;div class="price-period">forever&lt;/div>
 &lt;/div>
 &lt;/div>
 &lt;div class="features-list">
 &lt;div class="feature-item">
 &lt;span class="check-icon">✓&lt;/span>
 &lt;span>Access to all 150+ core modules&lt;/span>
 &lt;/div>
 &lt;div class="feature-item">
 &lt;span class="check-icon">✓&lt;/span>
 &lt;span>Java 21 support&lt;/span>
 &lt;/div>
 &lt;div class="feature-item">
 &lt;span class="check-icon">✓&lt;/span>
 &lt;span>Apache 2 license&lt;/span>
 &lt;/div>
 &lt;div class="feature-item">
 &lt;span class="check-icon">✓&lt;/span>
 &lt;span>Community Slack support&lt;/span>
 &lt;/div>
 &lt;/div>
 &lt;div class="cta-wrapper">
 &lt;a href="https://http4k.org/quickstart" class="btn btn-secondary">Get Started&lt;/a>
 &lt;/div>
 &lt;/div>

 
 &lt;div class="pricing-plan">
 &lt;div class="plan-name">Pro Edition&lt;/div>
 &lt;div class="perfect-for">Enterprise integrations and advanced cloud, security &amp; AI modules&lt;/div>
 &lt;div class="pricing-details">
 &lt;div class="plan-price">

 &lt;span class="price-currency">$&lt;/span>
 &lt;span class="price-amount">X&lt;/span>
 &lt;div class="price-period">per user/month billed annually*&lt;/div>
 &lt;/div>
 &lt;/div>
 &lt;div class="features-list">
 &lt;div class="feature-item highlight">
 &lt;span class="highlight-icon">★&lt;/span>
 &lt;span>Free for non-commercial use, social impact &amp; small companies**&lt;/span>
 &lt;/div>
 &lt;div class="feature-item">
 &lt;span class="check-icon">✓&lt;/span>
 &lt;span>Everything in Community&lt;/span>
 &lt;/div>
 &lt;div class="feature-item">
 &lt;span class="check-icon">✓&lt;/span>
 &lt;span>Access to all Pro licensed modules&lt;/span>
 &lt;/div>
 &lt;div class="feature-item">
 &lt;span class="check-icon">✓&lt;/span>
 &lt;span>Email support&lt;/span>
 &lt;/div>
 &lt;/div>
 &lt;div class="cta-wrapper">
 &lt;span class="btn btn-outline">Coming Soon...&lt;/span>
 
 &lt;/div>
 &lt;/div>

 
 &lt;div class="pricing-plan">
 &lt;div class="plan-name">Enterprise Edition&lt;/div>
 &lt;div class="perfect-for">
 Long-term stability and support for mission-critical systems
 &lt;/div>
 &lt;div class="pricing-details">
 &lt;div class="plan-price">
 &lt;span class="price-amount">Custom&lt;/span>
 &lt;div class="price-period">Tailored to your needs***&lt;/div>
 &lt;/div>
 &lt;/div>
 &lt;div class="features-list">
 &lt;div class="feature-item">
 &lt;span class="check-icon">✓&lt;/span>
 &lt;span>Everything in Pro&lt;/span>
 &lt;/div>
 &lt;div class="feature-item">
 &lt;span class="check-icon">✓&lt;/span>
 &lt;span>Java 8 LTS support&lt;/span>
 &lt;/div>
 &lt;div class="feature-item">
 &lt;span class="check-icon">✓&lt;/span>
 &lt;span>Priority Email &amp; Slack support&lt;/span>
 &lt;/div>
 &lt;div class="feature-item">
 &lt;span class="check-icon">✓&lt;/span>
 &lt;span>Source and binary access&lt;/span>
 &lt;/div>
 &lt;div class="feature-item">
 &lt;span class="check-icon">✓&lt;/span>
 &lt;span>License reporting&lt;/span>
 &lt;/div>
 &lt;/div>
 &lt;div class="cta-wrapper">
 &lt;a href="mailto:sales@http4k.org" class="btn btn-secondary">Contact Us&lt;/a>
 &lt;/div>
 &lt;/div>
 &lt;/div>

 &lt;div class="footnotes">
 &lt;div class="footnote-item">
 &lt;span class="footnote-marker">*&lt;/span>
 License based on floating developer workstation model. Licenses are not individually assigned. The number of developers using the license at the same
 time must not exceed the number of licenses purchased.
 &lt;/div>
 &lt;div class="footnote-item">
 &lt;span class="footnote-marker">**&lt;/span>
 Free for non-commercial use, social impact organizations, and companies with annual revenue under $5M or fewer than 50 employees.
 &lt;/div>
 &lt;div class="footnote-item">
 &lt;span class="footnote-marker">***&lt;/span>
 Volume discounts and support package customizations are available for your team's requirements. Please get in touch to discuss your needs.
 &lt;/div>
 &lt;/div>
&lt;/div></description></item><item><title>Privacy policy</title><link>https://http4k.org/privacy-policy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/privacy-policy/</guid><description>&lt;p>Effective date: 2024-05-20&lt;/p>
&lt;p>1. &lt;strong>Introduction&lt;/strong>&lt;/p>
&lt;p>Welcome to &lt;strong>http4k Ltd&lt;/strong>.&lt;/p>
&lt;p>&lt;strong>http4k Ltd&lt;/strong> (“us”, “we”, or “our”) operates &lt;strong>http4k.org&lt;/strong> (hereinafter referred to as &lt;strong>“Service”&lt;/strong>).&lt;/p></description></item><item><title>Quickstart</title><link>https://http4k.org/quickstart/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/quickstart/</guid><description>&lt;p>Depending on your learning situation, there are a number of options to get started with &lt;strong>http4k&lt;/strong>&amp;hellip;&lt;/p>
&lt;h1 id="help---im-new-and-scared">Help - I&amp;rsquo;m new and scared!&lt;/h1>
&lt;p>&lt;strong>Follow a tutorial&lt;/strong>: There is a step-by-step &lt;a href="https://http4k.org/tutorial/your_first_http4k_app/">beginner tutorial&lt;/a>. This will get you up and running with a basic buildable project.&lt;/p></description></item><item><title>Rationale</title><link>https://http4k.org/rationale/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/rationale/</guid><description>&lt;p>&lt;strong>http4k&lt;/strong> was created as the distillation of 15 years worth of experience of using various server-side libraries and we&amp;rsquo;ve stolen good ideas from everywhere we can. For instance - the routing module is inspired by &lt;a href="https://github.com/bodar/utterlyidle">UtterlyIdle&lt;/a>, the &amp;ldquo;Server as a function&amp;rdquo; and filter model is stolen from &lt;a href="https://twitter.github.io/finagle/">Finagle&lt;/a>, and the contract module OpenApi generator is ported from &lt;a href="http://fintrospect.github.io">Fintrospect&lt;/a>. With the growing adoption of Kotlin, we wanted something that would fully leverage the features of the language and it felt like a good time to start something from scratch.&lt;/p></description></item><item><title>Record and replay HTTP traffic</title><link>https://http4k.org/howto/record_and_replay_http_traffic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/howto/record_and_replay_http_traffic/</guid><description>&lt;p>A set of classes to provide simple recording/replaying of HTTP traffic. This is perfect for testing purposes, or in short lived, low traffic environments where no proper caches are available.&lt;/p></description></item><item><title>Redoc and Swagger UI</title><link>https://http4k.org/howto/create_a_swagger_ui/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/howto/create_a_swagger_ui/</guid><description>&lt;p>Http4k makes it easy to include Swagger UI or Redoc in your application.
These UIs can often replace traditional hand-written documentation for API consumers to learn your API,
and can even serve as useful debugging tools.&lt;/p></description></item><item><title>Request Contexts</title><link>https://http4k.org/howto/attach_context_to_a_request/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/howto/attach_context_to_a_request/</guid><description>&lt;p>A &lt;code>RequestContext&lt;/code> makes it possible to attach objects to a request whilst it is being passed down through the layers of an application.&lt;/p></description></item><item><title>Routing API (Advanced)</title><link>https://http4k.org/howto/nestable_routes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/howto/nestable_routes/</guid><description>&lt;p>This is a fairly comprehensive example of the core-routing logic available:&lt;/p>
&lt;ul>
&lt;li>Individual HTTP endpoints are represented as &lt;code>HttpHandlers&lt;/code>.&lt;/li>
&lt;li>Binding an &lt;code>HttpHandler&lt;/code> to a path and HTTP verb yields a &lt;code>Route&lt;/code>.&lt;/li>
&lt;li>&lt;code>Routes&lt;/code> can be combined together into a &lt;code>RoutingHttpHandler&lt;/code>, which is both an &lt;code>HttpHandler&lt;/code> and a&lt;code>Router&lt;/code>.&lt;/li>
&lt;li>A &lt;code>Router&lt;/code> is a selective request handler, which attempts to match a request. If it cannot, processing falls through to the next &lt;code>Router&lt;/code> in the list.&lt;/li>
&lt;li>Routers can be combined together to form another &lt;code>HttpHandler&lt;/code>&lt;/li>
&lt;li>Usage of supplied core library &lt;code>Filters&lt;/code>&lt;/li>
&lt;li>Serving of static content using a &lt;code>Classpath&lt;/code> resource loader&lt;/li>
&lt;li>Support for Single Page Applications using a &lt;code>singlePageApp()&lt;/code> block - resources loaded from here are loaded from the underlying &lt;code>ResourceLoader&lt;/code> or fallback to &lt;code>/&lt;/code> (and passed to the SPA code)&lt;/li>
&lt;/ul>
&lt;h3 id="dynamic-paths--path-variables">Dynamic Paths / Path Variables&lt;/h3>
&lt;p>As you would expect, http4k allows routes to include dynamic or variable elements in the matching path, and allows you to reference the variable in the Handler. For example:&lt;/p></description></item><item><title>Routing API (Simple)</title><link>https://http4k.org/howto/simple_routing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/howto/simple_routing/</guid><description>&lt;p>This example shows how to use the simple routing functionality to bind several routes.&lt;/p>
&lt;p>For the typesafe contract-style routing, refer to &lt;a href="https://http4k.org/howto/integrate_with_openapi/">this&lt;/a> recipe instead,&lt;/p></description></item><item><title>Security Policy</title><link>https://http4k.org/security-policy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/security-policy/</guid><description>&lt;h4 id="how-to-report-potential-security-vulnerabilities">How to Report Potential Security Vulnerabilities&lt;/h4>
&lt;p>If you discover any potential security vulnerabilities in the http4k ecosystem, please report them through GitHub&amp;rsquo;s
private vulnerability reporting feature.&lt;/p></description></item><item><title>Security: Digest</title><link>https://http4k.org/ecosystem/http4k/reference/digest/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/http4k/reference/digest/</guid><description>&lt;h3 id="installation-gradle">Installation (Gradle)&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-security-digest&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="about">About&lt;/h3>
&lt;p>Support for integrating with servers secured by Digest authentication; useful for working with legacy
servers or IOT devices that don&amp;rsquo;t typically support TLS. For completeness, a Digest Provider has also been included for use with servers.&lt;/p></description></item><item><title>Security: OAuth</title><link>https://http4k.org/ecosystem/http4k/reference/oauth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/http4k/reference/oauth/</guid><description>&lt;h3 id="installation-gradle">Installation (Gradle)&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-security-oauth&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="about">About&lt;/h3>
&lt;p>Support for using integrating with external OAuth2 providers for authentication purposes and to provide access to external APIs of entities such as Auth0, Google etc.&lt;/p></description></item><item><title>Self Document Systems with Tests</title><link>https://http4k.org/howto/self_document_systems_with_tests/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/howto/self_document_systems_with_tests/</guid><description>&lt;h3 id="gradle-setup">Gradle setup&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-core&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> testImplementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-testing-tracerbullet&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>When composing several http4k services together and talking to Fakes representing external systems, we can use a combination of request tracing filters (utilising distributed tracing headers) and the http4k event stream to capture and record events. This stream can be stored to disk or outputted to various rendered formats such as &lt;a href="https://plantuml.com/">PlantUML&lt;/a> or &lt;a href="https://mermaid.js.org/">Mermaid&lt;/a>.&lt;/p></description></item><item><title>Serve SSE</title><link>https://http4k.org/howto/serve_sse/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/howto/serve_sse/</guid><description>&lt;h3 id="gradle-setup">Gradle setup&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-core&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-server-undertow&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>http4k&lt;/strong> provides SSE (Server Sent Events) support using a simple, consistent, typesafe, and testable API on supported server backends (see above). SSE communication consists of 3 main concepts:&lt;/p></description></item><item><title>Serve Websocket</title><link>https://http4k.org/howto/serve_websockets/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/howto/serve_websockets/</guid><description>&lt;h3 id="gradle-setup">Gradle setup&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-core&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-server-undertow&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-client-websocket&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-format-jackson&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>http4k&lt;/strong> provides Websocket support using a simple, consistent, typesafe, and testable API on supported server backends (see above). Websocket communication consists of 4 main concepts:&lt;/p></description></item><item><title>Server-as-a-Function</title><link>https://http4k.org/howto/server_as_a_function/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/howto/server_as_a_function/</guid><description>&lt;p>This example is the simplest possible &amp;ldquo;server&amp;rdquo; implementation. Note that we are not spinning up a server-backend here - but the entire application(!) is testable by firing HTTP requests at it as if it were.&lt;/p></description></item><item><title>Server-Sent Events</title><link>https://http4k.org/ecosystem/http4k/concepts/server-sent-events/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/http4k/concepts/server-sent-events/</guid><description>&lt;p>&lt;strong>http4k&lt;/strong> provides SSE (Server-Sent Events) support using a simple, consistent, typesafe, and testable API on supported server backends.&lt;/p>
&lt;h3 id="about-sse">About SSE&lt;/h3>
&lt;p>In SSE, interactions with a backend from the client are done via HTTP requests - typically from an &lt;code>EventSource&lt;/code> in the browser,
which are replied to in the Server-Sent Event (SSE) messaging format. SSE is a simple message protocol that allows the
server to send one or more messages to the client over a single HTTP connection - often by keeping the connection open
to allow streaming, and is activated simply by requesting the &lt;code>text/event-stream&lt;/code> content type from the server.&lt;/p></description></item><item><title>Serverless</title><link>https://http4k.org/ecosystem/http4k/concepts/serverless/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/http4k/concepts/serverless/</guid><description>&lt;p>&lt;strong>http4k&lt;/strong> provides Serverless support using a simple, consistent, typesafe, and testable API on multiple supported Serverless platforms.&lt;/p>
&lt;p>There are two main types of API that can be served using the http4k infrastructure, although they are backed by the same lightweight system. As with the http4k ethos, there is a primary focus on simplicity, testability and portability - http4k simply acts as a shim layer over the top of the underlying platform.&lt;/p></description></item><item><title>Serverless</title><link>https://http4k.org/ecosystem/http4k/reference/serverless/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/http4k/reference/serverless/</guid><description>&lt;h3 id="installation-gradle">Installation (Gradle)&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// AWS Lambda: 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-serverless-lambda&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Google Cloud Functions: 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-serverless-gcf&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Apache OpenWhisk (IBM Cloud Functions): 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-serverless-openwhisk&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Azure Functions: 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-serverless-azure&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Alibaba Function Compute: 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-serverless-alibaba&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Tencent Serverless Cloud Functions: 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-serverless-tencent&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="about">About&lt;/h3>
&lt;p>These modules provide integration with Serverless deployment environments, such as AWS Lambda or Google Cloud Functions by implementing a single interface.&lt;/p></description></item><item><title>Servers</title><link>https://http4k.org/ecosystem/http4k/reference/servers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/http4k/reference/servers/</guid><description>&lt;h3 id="installation-gradle">Installation (Gradle)&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { { &amp;lt; http4k_bom &amp;gt; } }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Apache v5: 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-server-apache&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Apache v4: 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-server-apache4&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Jetty &amp;amp; JettyLoom: 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-server-jetty&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Jetty11 &amp;amp; Jetty11Loom: 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-server-jetty11&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Helidon (Loom): 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-server-helidon&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Ktor CIO: 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-server-ktorcio&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Ktor Netty: 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-server-ktornetty&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Netty: 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-server-netty&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Ratpack: 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-server-ratpack&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Servlet: 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-server-servlet&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Undertow: 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-server-undertow&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Java WebSocket:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-server-websocket&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// SunHttp &amp;amp; SunHttpLoom (for development only): 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-core&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="about">About&lt;/h3>
&lt;p>Server-backend modules provide a consistent API to mount HttpHandlers into the specified container in 1 LOC, by
simply passing it to the relevant &lt;code>ServerConfig&lt;/code> implementation (in this case &lt;code>Jetty&lt;/code>):&lt;/p></description></item><item><title>Showcase</title><link>https://http4k.org/showcase/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/showcase/</guid><description/></item><item><title>Storage</title><link>https://http4k.org/ecosystem/connect/reference/storage/core/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/connect/reference/storage/core/</guid><description>&lt;h3 id="installation">Installation&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-connect-storage-core&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>http4k-connect contains a simple lightweight pluggable Key-Value storage abstraction in the &lt;code>http4k-connect-storage-core&lt;/code> module, which can be used to serialise objects to an underlying store.&lt;/p></description></item><item><title>Storage: HTTP</title><link>https://http4k.org/ecosystem/connect/reference/storage/http/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/connect/reference/storage/http/</guid><description>&lt;h3 id="installation">Installation&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-connect-storage-http&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This storage implementation provides the ability to mount another storage implementation remotely over HTTP inside an OpenAPI compatible server.&lt;/p></description></item><item><title>Storage: JDBC</title><link>https://http4k.org/ecosystem/connect/reference/storage/jdbc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/connect/reference/storage/jdbc/</guid><description>&lt;h3 id="installation">Installation&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-connect-storage-jdbc&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This implementation uses the Jetbrains Exposed library to store the data in the DB. All data is serialised to disk by
passing it though an http4k AutoMarshalling adapter (see the &lt;code>http4k-format-XXX&lt;/code> modules). In the example below we use a
JSON adapter backed by Moshi (which is the default).&lt;/p></description></item><item><title>Storage: Redis</title><link>https://http4k.org/ecosystem/connect/reference/storage/redis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/connect/reference/storage/redis/</guid><description>&lt;h3 id="installation">Installation&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-connect-storage-redis&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This implementation uses the Lettuce Client library to store the data in Redis. All data is serialised to disk by
passing it though an http4k AutoMarshalling adapter (see the &lt;code>http4k-format-XXX&lt;/code> modules). In the example below we use a
JSON adapter backed by Moshi (which is the default).&lt;/p></description></item><item><title>Storage: S3</title><link>https://http4k.org/ecosystem/connect/reference/storage/s3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/connect/reference/storage/s3/</guid><description>&lt;h3 id="installation">Installation&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-connect-storage-s3&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This implementation uses the http4k Connect adapter to store the data in S3. All data is serialised to disk by
passing it though an http4k AutoMarshalling adapter (see the &lt;code>http4k-format-XXX&lt;/code> modules). In the example below we use a
JSON adapter backed by Moshi (which is the default).&lt;/p></description></item><item><title>Structure your logs with Events</title><link>https://http4k.org/howto/structure_your_logs_with_events/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/howto/structure_your_logs_with_events/</guid><description>&lt;h3 id="gradle-setup">Gradle setup&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-core&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-format-jackson&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In order to leverage modern log aggregation platforms, we should move away from logging arbitrary strings into the StdOut of our applications, and move towards &lt;a href="https://www.thoughtworks.com/radar/techniques/structured-logging">Structured Logging&lt;/a> instead, which allows us to treat logs as data which can be mined to give us better observability of our systems. This also encourages the move for developers to think about which events happening in your apps are actually important and what data is appropriate to be attached to each one.&lt;/p></description></item><item><title>System Fakes</title><link>https://http4k.org/ecosystem/connect/concepts/fakes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/connect/concepts/fakes/</guid><description>&lt;p>Each module comes with it&amp;rsquo;s own Fake system which implements the remote HTTP interface. In like with the &lt;code>Server as a Function&lt;/code> concept, this Fake class implements &lt;code>HttpHandler&lt;/code> and:&lt;/p></description></item><item><title>TDDing http4k Part 1: Building a walking skeleton</title><link>https://http4k.org/tutorial/tdding_http4k/part1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/tutorial/tdding_http4k/part1/</guid><description>&lt;p>Until we have an application that can be deployed, we cannot create any business value. The Walking Skeleton
model dictates that putting the most trivial endpoint into a production environment will prove our deployment
pipeline is sound, and helps to set the direction for the testing strategy that we will use going forward.&lt;/p></description></item><item><title>TDDing http4k Part 2: Adding an endpoint</title><link>https://http4k.org/tutorial/tdding_http4k/part2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/tutorial/tdding_http4k/part2/</guid><description>&lt;ul>
&lt;li>&lt;a href="../part1/">Part 1: Building a walking skeleton&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Starting with another EndToEnd test, we can then drill-down into the functional behaviour of the system by introducing
OCT (Out of Container) tests and converting the e2e test to just test endpoint wiring (so far). The common assertions have
also been converted to reusable extension methods on Response.&lt;/p></description></item><item><title>TDDing http4k Part 3: Adding another endpoint</title><link>https://http4k.org/tutorial/tdding_http4k/part3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/tutorial/tdding_http4k/part3/</guid><description>&lt;ul>
&lt;li>&lt;a href="../part1/">Part 1: Building a walking skeleton&lt;/a>&lt;/li>
&lt;li>&lt;a href="../part2/">Part 2: Adding an endpoint&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="requirements">Requirements:&lt;/h3>
&lt;ul>
&lt;li>Implement a &amp;ldquo;multiply&amp;rdquo; service, which will find the product of a number of integer values.&lt;/li>
&lt;/ul>
&lt;h3 id="tests">Tests:&lt;/h3>




&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">package&lt;/span> content.tutorial.tdding_http4k.part3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> com.natpryce.hamkrest.and
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> com.natpryce.hamkrest.assertion.assertThat
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> content.tutorial.tdding_http4k.part3.Matchers.answerShouldBe
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.client.OkHttp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.Method.GET
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.Request
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.Response
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.Status.Companion.BAD_REQUEST
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.Status.Companion.OK
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.hamkrest.hasBody
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.hamkrest.hasStatus
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.junit.jupiter.api.AfterEach
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.junit.jupiter.api.BeforeEach
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.junit.jupiter.api.Test
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">object&lt;/span> &lt;span style="color:#a6e22e">Matchers&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">Response&lt;/span>.answerShouldBe(expected: Int) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> assertThat(&lt;span style="color:#66d9ef">this&lt;/span>, hasStatus(OK).and(hasBody(expected.toString())))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">EndToEndTest&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> client = OkHttp()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> server = MyMathServer(&lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@BeforeEach&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">setup&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> server.start()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@AfterEach&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">teardown&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> server.stop()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Test&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">`all endpoints are mounted correctly`&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> assertThat(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> client(Request(GET, &lt;span style="color:#e6db74">&amp;#34;http://localhost:&lt;/span>&lt;span style="color:#e6db74">${server.port()}&lt;/span>&lt;span style="color:#e6db74">/ping&amp;#34;&lt;/span>)),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hasStatus(OK)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> client(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Request(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> GET,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;http://localhost:&lt;/span>&lt;span style="color:#e6db74">${server.port()}&lt;/span>&lt;span style="color:#e6db74">/add?value=1&amp;amp;value=2&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ).answerShouldBe(&lt;span style="color:#ae81ff">3&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> client(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Request(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> GET,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;http://localhost:&lt;/span>&lt;span style="color:#e6db74">${server.port()}&lt;/span>&lt;span style="color:#e6db74">/multiply?value=2&amp;amp;value=4&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ).answerShouldBe(&lt;span style="color:#ae81ff">8&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">AddFunctionalTest&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> client = MyMathsApp()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Test&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">`adds values together`&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> client(Request(GET, &lt;span style="color:#e6db74">&amp;#34;/add?value=1&amp;amp;value=2&amp;#34;&lt;/span>)).answerShouldBe(&lt;span style="color:#ae81ff">3&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Test&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">`answer is zero when no values`&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> client(Request(GET, &lt;span style="color:#e6db74">&amp;#34;/add&amp;#34;&lt;/span>)).answerShouldBe(&lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Test&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">`bad request when some values are not numbers`&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> assertThat(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> client(Request(GET, &lt;span style="color:#e6db74">&amp;#34;/add?value=1&amp;amp;value=notANumber&amp;#34;&lt;/span>)),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hasStatus(BAD_REQUEST)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">MultiplyFunctionalTest&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> client = MyMathsApp()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Test&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">`products values together`&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> client(Request(GET, &lt;span style="color:#e6db74">&amp;#34;/multiply?value=2&amp;amp;value=4&amp;#34;&lt;/span>)).answerShouldBe(&lt;span style="color:#ae81ff">8&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Test&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">`answer is zero when no values`&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> client(Request(GET, &lt;span style="color:#e6db74">&amp;#34;/multiply&amp;#34;&lt;/span>)).answerShouldBe(&lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Test&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">`bad request when some values are not numbers`&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> assertThat(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> client(Request(GET, &lt;span style="color:#e6db74">&amp;#34;/multiply?value=1&amp;amp;value=notANumber&amp;#34;&lt;/span>)),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hasStatus(BAD_REQUEST)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>

&lt;h3 id="production">Production:&lt;/h3>




&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">package&lt;/span> content.tutorial.tdding_http4k.part3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.HttpHandler
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.Method.GET
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.Request
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.Response
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.Status.Companion.OK
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.then
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.filter.ServerFilters.CatchLensFailure
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.lens.Query
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.lens.int
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.routing.bind
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.routing.routes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.server.Http4kServer
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.server.Jetty
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.server.asServer
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">MyMathServer&lt;/span>(port: Int): Http4kServer = MyMathsApp().asServer(Jetty(port))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">MyMathsApp&lt;/span>(): HttpHandler = &lt;span style="color:#a6e22e">CatchLensFailure&lt;/span>.then(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> routes(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;/ping&amp;#34;&lt;/span> bind GET to { _: Request &lt;span style="color:#f92672">-&amp;gt;&lt;/span> Response(OK) },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;/add&amp;#34;&lt;/span> bind GET to calculate { &lt;span style="color:#66d9ef">it&lt;/span>.sum() },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;/multiply&amp;#34;&lt;/span> bind GET to calculate { &lt;span style="color:#66d9ef">it&lt;/span>.fold(&lt;span style="color:#ae81ff">1&lt;/span>) { memo, next &lt;span style="color:#f92672">-&amp;gt;&lt;/span> memo * next } }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">calculate&lt;/span>(fn: (List&amp;lt;Int&amp;gt;) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> Int): (Request) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> Response {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> values = &lt;span style="color:#a6e22e">Query&lt;/span>.int().multi.defaulted(&lt;span style="color:#e6db74">&amp;#34;value&amp;#34;&lt;/span>, listOf())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> { request: Request &lt;span style="color:#f92672">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> valuesToCalc = values(request)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> answer = &lt;span style="color:#66d9ef">if&lt;/span> (valuesToCalc.isEmpty()) &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#66d9ef">else&lt;/span> fn(valuesToCalc)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Response(OK).body(answer.toString())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>

&lt;ul>
&lt;li>&lt;a href="../part4/">Part 4: Adding an external dependency&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>TDDing http4k Part 4: Adding an external dependency</title><link>https://http4k.org/tutorial/tdding_http4k/part4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/tutorial/tdding_http4k/part4/</guid><description>&lt;ul>
&lt;li>&lt;a href="../part1/">Part 1: Building a walking skeleton&lt;/a>&lt;/li>
&lt;li>&lt;a href="../part2/">Part 2: Adding an endpoint&lt;/a>&lt;/li>
&lt;li>&lt;a href="../part3/">Part 3: Adding another endpoint&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>At this point, the separation of the layers starts to become clear:&lt;/p></description></item><item><title>Templating</title><link>https://http4k.org/ecosystem/http4k/reference/templating/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/http4k/reference/templating/</guid><description>&lt;h3 id="installation-gradle">Installation (Gradle)&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Dust: 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-template-dust&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Freemarker: 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-template-freemarker&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Handlebars: 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-template-handlebars&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Pug4j: 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-template-pug4j&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// JTE: 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-template-jte&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Pebble: 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-template-pebble&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Rocker: 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-template-rocker&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Thymeleaf: 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-template-thymeleaf&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="about">About&lt;/h3>
&lt;p>The http4k templating API provides a standard mechanism for rendering using common templating libraries. Simply implement the &lt;code>ViewModel&lt;/code> interface on a model class and pass it to the renderer to get a string. All of the implementations support view rendering using the following strategies:&lt;/p></description></item><item><title>Terms &amp; conditions</title><link>https://http4k.org/terms-and-conditions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/terms-and-conditions/</guid><description>&lt;p>Last updated: 2024-05-20&lt;/p>
&lt;p>1. &lt;strong>Introduction&lt;/strong>&lt;/p>
&lt;p>Welcome to &lt;strong>http4k Ltd&lt;/strong> (“Company”, “we”, “our”, “us”)!&lt;/p>
&lt;p>These Terms of Service (“Terms”, “Terms of Service”) govern your use of our website located at &lt;strong>http4k.org&lt;/strong> (together or individually “Service”) operated by &lt;strong>http4k Ltd&lt;/strong>.&lt;/p></description></item><item><title>Test using Service Virtualisation</title><link>https://http4k.org/howto/test_using_service_virtualisation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/howto/test_using_service_virtualisation/</guid><description>&lt;h4 id="using-the-junit-extensions">Using the JUnit Extensions&lt;/h4>




&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">package&lt;/span> content.howto.test_using_service_virtualisation.junit
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> com.natpryce.hamkrest.assertion.assertThat
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> com.natpryce.hamkrest.equalTo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.client.ApacheClient
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.Credentials
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.HttpHandler
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.Method.POST
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.Request
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.Response
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.Status.Companion.OK
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.Uri
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.then
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.filter.ClientFilters.SetHostFrom
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.junit.ServirtiumRecording
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.junit.ServirtiumReplay
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.server.SunHttp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.server.asServer
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.servirtium.GitHub
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.servirtium.InteractionStorage.Companion.Disk
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.junit.jupiter.api.AfterEach
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.junit.jupiter.api.BeforeAll
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.junit.jupiter.api.Disabled
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.junit.jupiter.api.Test
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.junit.jupiter.api.TestInstance
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.junit.jupiter.api.TestInstance.Lifecycle.PER_CLASS
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.junit.jupiter.api.extension.RegisterExtension
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> java.io.File
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> java.nio.file.Paths
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * This client wraps the calls to a remote WordCounter service
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">WordCounterClient&lt;/span>(&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> http: HttpHandler) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">wordCount&lt;/span>(name: String): Int =
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> http(Request(POST, &lt;span style="color:#e6db74">&amp;#34;/count&amp;#34;&lt;/span>).body(name)).bodyString().toInt()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * This is our producing app
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">WordCounterApp&lt;/span> : HttpHandler {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">override&lt;/span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">invoke&lt;/span>(req: Request) = Response(OK).body(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> req.bodyString().run { &lt;span style="color:#66d9ef">if&lt;/span> (isBlank()) &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#66d9ef">else&lt;/span> split(&lt;span style="color:#e6db74">&amp;#34; &amp;#34;&lt;/span>).size }.toString()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * Defines the test contract which will be recorded and replayed later.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * The injected HttpHandler is provided by the implementations of this interface.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">WordCounterContract&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Test&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">`count the number of words`&lt;/span>(handler: HttpHandler) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> assertThat(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> WordCounterClient(handler).wordCount(&lt;span style="color:#e6db74">&amp;#34;A random string with 6 words&amp;#34;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> equalTo(&lt;span style="color:#ae81ff">6&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Test&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">`empty string has zero words`&lt;/span>(handler: HttpHandler) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> assertThat(WordCounterClient(handler).wordCount(&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>), equalTo(&lt;span style="color:#ae81ff">0&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * For the traditional use-case of a CDC, we use a real Http client to
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * record the traffic against a running version of the producing service.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Disabled&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">RemoteHttpRecordingWordCounterTest&lt;/span> : WordCounterContract {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> app = SetHostFrom(&lt;span style="color:#a6e22e">Uri&lt;/span>.of(&lt;span style="color:#e6db74">&amp;#34;http://serverundertest:8080&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .then(ApacheClient())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@JvmField&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@RegisterExtension&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> record = ServirtiumRecording(&lt;span style="color:#e6db74">&amp;#34;WordCounter&amp;#34;&lt;/span>, app, Disk(File(&lt;span style="color:#e6db74">&amp;#34;.&amp;#34;&lt;/span>)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * In cases where the producing service codebase:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * 1. Has access to the wrapping Client and the ClientContract code (eg. monorepo with several services)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * 2. Is also written in http4k
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * ... we can have the Producer implement the contract entirely in-memory without a MiTM.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Disabled&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">InMemoryRecordingWordCounterTest&lt;/span> : WordCounterContract {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> app = WordCounterApp()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@JvmField&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@RegisterExtension&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> record = ServirtiumRecording(&lt;span style="color:#e6db74">&amp;#34;WordCounter&amp;#34;&lt;/span>, app, Disk(File(&lt;span style="color:#e6db74">&amp;#34;.&amp;#34;&lt;/span>)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@AfterEach&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">after&lt;/span>(handler: HttpHandler) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> name = &lt;span style="color:#e6db74">&amp;#34;this traffic is not recorded&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println(name + &lt;span style="color:#e6db74">&amp;#34;: &amp;#34;&lt;/span> + WordCounterClient(handler).wordCount(name))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * In cases where the producing service codebase:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * 1. Has access to the wrapping Client and the ClientContract code (eg. monorepo with several services)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * 2. Is *not* written in http4k
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * ... we can have the Producer implement the contract by starting up the server and with a MiTM.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@TestInstance&lt;/span>(PER_CLASS)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Disabled&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">PortBoundRecordingWordCounterTest&lt;/span> : WordCounterContract {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@BeforeAll&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">start&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// pretend that this is not an http4k service.. :)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> WordCounterApp().asServer(SunHttp(&lt;span style="color:#ae81ff">8080&lt;/span>)).start()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> app = SetHostFrom(&lt;span style="color:#a6e22e">Uri&lt;/span>.of(&lt;span style="color:#e6db74">&amp;#34;http://localhost:8080&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .then(ApacheClient())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@JvmField&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@RegisterExtension&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> record = ServirtiumRecording(&lt;span style="color:#e6db74">&amp;#34;WordCounter&amp;#34;&lt;/span>, app, Disk(File(&lt;span style="color:#e6db74">&amp;#34;.&amp;#34;&lt;/span>)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Disabled&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">ReplayFromDiskTest&lt;/span> : WordCounterContract {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@JvmField&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@RegisterExtension&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> replay = ServirtiumReplay(&lt;span style="color:#e6db74">&amp;#34;WordCounter&amp;#34;&lt;/span>, Disk(File(&lt;span style="color:#e6db74">&amp;#34;.&amp;#34;&lt;/span>)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Disabled&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">ReplayFromGitHubTest&lt;/span> : WordCounterContract {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@JvmField&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@RegisterExtension&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> replay = ServirtiumReplay(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;WordCounter&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> GitHub(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;http4k&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;http4k&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Credentials(&lt;span style="color:#e6db74">&amp;#34;&amp;lt;github user&amp;gt;&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;&amp;lt;personal access token&amp;gt;&amp;#34;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Paths&lt;/span>.&lt;span style="color:#66d9ef">get&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;src/test/resources/guide/howto/service_virtualisation&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>

&lt;h4 id="using-a-mitm-proxy">Using a MiTM Proxy&lt;/h4>




&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">package&lt;/span> content.howto.test_using_service_virtualisation.mitm
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> com.natpryce.hamkrest.assertion.assertThat
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> com.natpryce.hamkrest.equalTo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.client.ApacheClient
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.Credentials
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.Method.POST
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.Request
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.Response
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.Status.Companion.OK
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.Uri
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.then
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.filter.ClientFilters
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.filter.ClientFilters.SetHostFrom
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.filter.HandleRemoteRequestFailed
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.routing.bind
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.routing.routes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.server.Http4kServer
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.server.SunHttp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.server.asServer
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.servirtium.GitHub
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.servirtium.InteractionOptions
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.servirtium.InteractionStorage.Companion.Disk
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.servirtium.ServirtiumServer
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.junit.jupiter.api.AfterEach
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.junit.jupiter.api.BeforeEach
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.junit.jupiter.api.Disabled
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.junit.jupiter.api.Test
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.junit.jupiter.api.TestInfo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> java.io.File
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> java.nio.file.Paths
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * This is our producing app
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">WordCounterApp&lt;/span>(port: Int): Http4kServer {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> app = routes(&lt;span style="color:#e6db74">&amp;#34;/count&amp;#34;&lt;/span> bind POST to { req: Request &lt;span style="color:#f92672">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Response(OK).body(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> req.bodyString().run { &lt;span style="color:#66d9ef">if&lt;/span> (isBlank()) &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#66d9ef">else&lt;/span> split(&lt;span style="color:#e6db74">&amp;#34; &amp;#34;&lt;/span>).size }.toString()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> app.asServer(SunHttp(port))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * This client wraps the calls to a remote WordCounter service
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">WordCounterClient&lt;/span>(baseUri: Uri) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> http = SetHostFrom(baseUri)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .then(&lt;span style="color:#a6e22e">ClientFilters&lt;/span>.HandleRemoteRequestFailed())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .then(ApacheClient())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">wordCount&lt;/span>(name: String): Int =
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> http(Request(POST, &lt;span style="color:#e6db74">&amp;#34;/count&amp;#34;&lt;/span>).body(name)).bodyString().toInt()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * Defines the test contract which will be recorded and replayed later.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">WordCounterContract&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> uri: Uri
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Test&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">`count the number of words`&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> assertThat(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> WordCounterClient(uri).wordCount(&lt;span style="color:#e6db74">&amp;#34;A random string with 6 words&amp;#34;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> equalTo(&lt;span style="color:#ae81ff">6&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Test&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">`empty string has zero words`&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> assertThat(WordCounterClient(uri).wordCount(&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>), equalTo(&lt;span style="color:#ae81ff">0&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * This calls the server directly
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Disabled&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">DirectHttpWordCounterTest&lt;/span> : WordCounterContract {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">override&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> uri = &lt;span style="color:#a6e22e">Uri&lt;/span>.of(&lt;span style="color:#e6db74">&amp;#34;http://serverundertest:8080&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * Proxies traffic to the real service and records it to disk. Both MiTM and Producer start on a random port.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Disabled&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">MiTMRecordingWordCounterTest&lt;/span> : WordCounterContract {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">override&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> uri &lt;span style="color:#66d9ef">get&lt;/span>() = &lt;span style="color:#a6e22e">Uri&lt;/span>.of(&lt;span style="color:#e6db74">&amp;#34;http://localhost:&lt;/span>&lt;span style="color:#e6db74">${servirtium.port()}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> app = WordCounterApp(&lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">lateinit&lt;/span> &lt;span style="color:#66d9ef">var&lt;/span> servirtium: Http4kServer
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@BeforeEach&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">start&lt;/span>(info: TestInfo) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> appPort = app.start().port()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> servirtium = &lt;span style="color:#a6e22e">ServirtiumServer&lt;/span>.Recording(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> info.displayName.removeSuffix(&lt;span style="color:#e6db74">&amp;#34;()&amp;#34;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Uri&lt;/span>.of(&lt;span style="color:#e6db74">&amp;#34;http://localhost:&lt;/span>&lt;span style="color:#e6db74">$appPort&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Disk(File(&lt;span style="color:#e6db74">&amp;#34;.&amp;#34;&lt;/span>)),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">object&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">: &lt;/span>&lt;span style="color:#a6e22e">InteractionOptions&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">override&lt;/span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">modify&lt;/span>(request: Request) =
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> request.removeHeader(&lt;span style="color:#e6db74">&amp;#34;Host&amp;#34;&lt;/span>).removeHeader(&lt;span style="color:#e6db74">&amp;#34;User-agent&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">override&lt;/span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">modify&lt;/span>(response: Response) = response.removeHeader(&lt;span style="color:#e6db74">&amp;#34;Date&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ).start()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@AfterEach&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">stop&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> app.stop()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> servirtium.stop()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * Replays incoming traffic from disk. MiTM starts on a random port.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Disabled&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">MiTMReplayingWordCounterTest&lt;/span> : WordCounterContract {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">override&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> uri &lt;span style="color:#66d9ef">get&lt;/span>() = &lt;span style="color:#a6e22e">Uri&lt;/span>.of(&lt;span style="color:#e6db74">&amp;#34;http://localhost:&lt;/span>&lt;span style="color:#e6db74">${servirtium.port()}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">lateinit&lt;/span> &lt;span style="color:#66d9ef">var&lt;/span> servirtium: Http4kServer
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@BeforeEach&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">start&lt;/span>(info: TestInfo) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> servirtium = &lt;span style="color:#a6e22e">ServirtiumServer&lt;/span>.Replay(info.displayName.removeSuffix(&lt;span style="color:#e6db74">&amp;#34;()&amp;#34;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Disk(File(&lt;span style="color:#e6db74">&amp;#34;.&amp;#34;&lt;/span>)),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">object&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">: &lt;/span>&lt;span style="color:#a6e22e">InteractionOptions&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">override&lt;/span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">modify&lt;/span>(request: Request) =
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> request.header(&lt;span style="color:#e6db74">&amp;#34;Date&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;some overridden date&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ).start()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@AfterEach&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">stop&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> servirtium.stop()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * Replays incoming traffic from GitHub. MiTM starts on a random port. Requires a github username
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * and personal access token.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Disabled&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">GitHubReplayingWordCounterTest&lt;/span> : WordCounterContract {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">override&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> uri &lt;span style="color:#66d9ef">get&lt;/span>() = &lt;span style="color:#a6e22e">Uri&lt;/span>.of(&lt;span style="color:#e6db74">&amp;#34;http://localhost:&lt;/span>&lt;span style="color:#e6db74">${servirtium.port()}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">lateinit&lt;/span> &lt;span style="color:#66d9ef">var&lt;/span> servirtium: Http4kServer
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@BeforeEach&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">start&lt;/span>(info: TestInfo) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> servirtium =
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ServirtiumServer&lt;/span>.Replay(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name = &lt;span style="color:#e6db74">&amp;#34;WordCounter.&amp;#34;&lt;/span> + info.displayName.removeSuffix(&lt;span style="color:#e6db74">&amp;#34;()&amp;#34;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> GitHub(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;http4k&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;http4k&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Credentials(&lt;span style="color:#e6db74">&amp;#34;&amp;lt;github user&amp;gt;&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;&amp;lt;personal access token&amp;gt;&amp;#34;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Paths&lt;/span>.&lt;span style="color:#66d9ef">get&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;src/test/resources/guide/howto/service_virtualisation&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">object&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">: &lt;/span>&lt;span style="color:#a6e22e">InteractionOptions&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">override&lt;/span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">modify&lt;/span>(request: Request) = request
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .removeHeader(&lt;span style="color:#e6db74">&amp;#34;Accept-encoding&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .removeHeader(&lt;span style="color:#e6db74">&amp;#34;Connection&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .removeHeader(&lt;span style="color:#e6db74">&amp;#34;Host&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .removeHeader(&lt;span style="color:#e6db74">&amp;#34;User-agent&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .removeHeader(&lt;span style="color:#e6db74">&amp;#34;Content-length&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ).start()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@AfterEach&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">stop&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> servirtium.stop()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Testing http4k</title><link>https://http4k.org/ecosystem/http4k/reference/testing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/http4k/reference/testing/</guid><description>&lt;p>The creators of http4k takes testing very seriously - so seriously that there really isn&amp;rsquo;t that much to say here!
The API has been designed to make it as simple as possible to test both individual endpoints and entire applications in a consistent fashion, which is aided by remembering that:&lt;/p></description></item><item><title>Testing: Approval</title><link>https://http4k.org/ecosystem/http4k/reference/approvaltests/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/http4k/reference/approvaltests/</guid><description>&lt;h3 id="installation-gradle">Installation (Gradle)&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-testing-approval&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="about">About&lt;/h3>
&lt;p>&lt;a href="http://approvaltests.com/">Approval testing&lt;/a> is a form of testing which allows the expected output of
a test to be specified in a non-code but still source-controlled format, such as a text file. This is a powerful alternative to traditional assertion-based tests for a number of reasons:&lt;/p></description></item><item><title>Testing: Chaos</title><link>https://http4k.org/ecosystem/http4k/reference/chaos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/http4k/reference/chaos/</guid><description>&lt;h3 id="installation-gradle">Installation (Gradle)&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-testing-chaos&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="about">About&lt;/h3>
&lt;p>The http4k Chaos module provides the facility to statically or dynamically inject failure modes into http4k applications, such as random HTTP failures, killing of processes, and extra latency injection. By modelling these modes, it is possible to plan for mitigation of particular scenarios on a wider scale, resulting either from failures within your system boundary, or those caused by dependent remote HTTP services.&lt;/p></description></item><item><title>Testing: Hamkrest</title><link>https://http4k.org/ecosystem/http4k/reference/hamkrest/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/http4k/reference/hamkrest/</guid><description>&lt;h3 id="installation-gradle">Installation (Gradle)&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-testing-hamkrest&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="about">About&lt;/h3>
&lt;p>A set of Hamkrest matchers for use when testing http4k apps.&lt;/p></description></item><item><title>Testing: Kotest</title><link>https://http4k.org/ecosystem/http4k/reference/kotest/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/http4k/reference/kotest/</guid><description>&lt;h3 id="installation-gradle">Installation (Gradle)&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-testing-kotest&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="about">About&lt;/h3>
&lt;p>A set of &lt;a href="https://github.com/kotest/kotest">Kotest&lt;/a> matchers for use when testing http4k apps.&lt;/p></description></item><item><title>Testing: Playwright</title><link>https://http4k.org/ecosystem/http4k/reference/playwright/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/http4k/reference/playwright/</guid><description>&lt;h3 id="installation-gradle">Installation (Gradle)&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-testing-playwright&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="about">About&lt;/h3>
&lt;p>A JUnit extension for simply testing your http4k applications using the Playwright browser-automation library.&lt;/p></description></item><item><title>Testing: Servirtium</title><link>https://http4k.org/ecosystem/http4k/reference/servicevirtualisation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/http4k/reference/servicevirtualisation/</guid><description>&lt;h3 id="installation-gradle">Installation (Gradle)&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-testing-servirtium&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="about">About&lt;/h3>
&lt;p>Service Virtualisation testing technology provides a way of declaring contracts which can record HTTP conversations to a custom Markdown format and then replaying them later offline. http4k provides a fully featured implementation of the &lt;a href="https://servirtium.dev">Servirtium&lt;/a> solution to implement this concept.&lt;/p></description></item><item><title>Testing: Strikt</title><link>https://http4k.org/ecosystem/http4k/reference/strikt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/http4k/reference/strikt/</guid><description>&lt;h3 id="installation-gradle">Installation (Gradle)&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-testing-strikt&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="about">About&lt;/h3>
&lt;p>A set of Strikt matchers for use when testing http4k apps.&lt;/p></description></item><item><title>Testing: TracerBullet</title><link>https://http4k.org/ecosystem/http4k/reference/tracerbullet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/http4k/reference/tracerbullet/</guid><description>&lt;h3 id="installation-gradle">Installation (Gradle)&lt;/h3>
&lt;h3 id="gradle-setup">Gradle setup&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-testing-tracerbullet&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The http4k TracerBullet module brings together a lot of http4k innovations to help you to self-document your system and
let&amp;rsquo;s you answer questions about your system with your tests apart from the obvious one - &amp;ldquo;Does it work?&amp;rdquo;.&lt;/p></description></item><item><title>Testing: WebDriver</title><link>https://http4k.org/ecosystem/http4k/reference/webdriver/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/http4k/reference/webdriver/</guid><description>&lt;h3 id="installation-gradle">Installation (Gradle)&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-testing-webdriver&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="about">About&lt;/h3>
&lt;p>A basic Selenium WebDriver API implementation for http4k HttpHandlers, which runs completely out of container (no network) for ultra fast tests, backed by JSoup.&lt;/p></description></item><item><title>Typesafe your API with lenses</title><link>https://http4k.org/howto/typesafe_your_api_with_lenses/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/howto/typesafe_your_api_with_lenses/</guid><description>&lt;p>Example showing how to create and apply lenses to requests and responses to both extract and inject typesafe values out of and into HTTP messages. Note that since the &lt;strong>http4k&lt;/strong> &lt;code>Request/Response&lt;/code> objects are immutable, all injection occurs via copy.&lt;/p></description></item><item><title>Use a custom OAuth provider</title><link>https://http4k.org/howto/use_a_custom_oauth_provider/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/howto/use_a_custom_oauth_provider/</guid><description>&lt;p>It is very easy to configure http4k to integrate with any OAuth2 provider who supports the Authorisation Code Grant.&lt;/p>
&lt;h3 id="gradle-setup">Gradle setup&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-core&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-security-oauth&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>For this example, simply reconfigure the &lt;code>OAuthProvider&lt;/code> instance with the correct details, and provide custom logic for persisting and retrieving the CSRF and AccessToken.&lt;/p></description></item><item><title>Use a Server backend</title><link>https://http4k.org/howto/use_a_server_backend/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/howto/use_a_server_backend/</guid><description>&lt;p>This example shows how to both serve an application HttpHandler using an embedded HTTP server and to query it using an HTTP client. All server-backend implementations are launched in an identical manner (in 1LOC) using implementations of the &lt;code>ServerConfig&lt;/code> interface - and a base implementation of this interface is provided for each server backend.&lt;/p></description></item><item><title>Use a templating engine</title><link>https://http4k.org/howto/use_a_templating_engine/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/howto/use_a_templating_engine/</guid><description>&lt;p>Example showing how to use the Templating modules - in this case Handlebars, both by standard response manipulation and via a typesafe view lens.&lt;/p></description></item><item><title>Use Auto Content Negotiation</title><link>https://http4k.org/howto/use_auto_content_negotiation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/howto/use_auto_content_negotiation/</guid><description>&lt;p>Example showing how to combine multiple body Lenses into a single facade that will simplify content negotiation for inbound and outbound messages.&lt;/p></description></item><item><title>Use HTML Forms</title><link>https://http4k.org/howto/use_html_forms/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/howto/use_html_forms/</guid><description>&lt;p>HTML form support is provided on 2 levels:&lt;/p>
&lt;ol>
&lt;li>Through the use of &lt;code>form()&lt;/code> extension methods on &lt;code>Request&lt;/code> to get/set String values.&lt;/li>
&lt;li>Using the Lens system, which adds the facility to define form fields in a typesafe way, and to validate form contents (in either a strict (400) or &amp;ldquo;feedback&amp;rdquo; mode).&lt;/li>
&lt;/ol>
&lt;h3 id="gradle-setup">Gradle setup&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-core&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="standard-non-typesafe-api">Standard (non-typesafe) API&lt;/h3>




&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">package&lt;/span> content.howto.use_html_forms
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.Method.GET
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.Request
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.body.form
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.getFirst
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.toParametersMap
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.junit.jupiter.api.Assertions.assertEquals
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.junit.jupiter.api.Assertions.assertNull
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// form(name: String, value: String?) parses the request body on each invocation
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> request = Request(GET, &lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span>).form(&lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;rita&amp;#34;&lt;/span>).form(&lt;span style="color:#e6db74">&amp;#34;age&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;55&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// form(vararg formData: Pair&amp;lt;String, String&amp;gt;) allows you to add multiple form fields to
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// the request while only parsing the request body once
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> allInOneRequest = Request(GET, &lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span>).form(&lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span> to &lt;span style="color:#e6db74">&amp;#34;rita&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;age&amp;#34;&lt;/span> to &lt;span style="color:#e6db74">&amp;#34;55&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// form(name: String) parses the request body on each invocation
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> assertEquals(&lt;span style="color:#e6db74">&amp;#34;rita&amp;#34;&lt;/span>, request.form(&lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> assertEquals(&lt;span style="color:#e6db74">&amp;#34;55&amp;#34;&lt;/span>, request.form(&lt;span style="color:#e6db74">&amp;#34;age&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> assertNull(request.form(&lt;span style="color:#e6db74">&amp;#34;height&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> assertEquals(&lt;span style="color:#e6db74">&amp;#34;rita&amp;#34;&lt;/span>, allInOneRequest.form(&lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> assertEquals(&lt;span style="color:#e6db74">&amp;#34;55&amp;#34;&lt;/span>, allInOneRequest.form(&lt;span style="color:#e6db74">&amp;#34;age&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> assertNull(allInOneRequest.form(&lt;span style="color:#e6db74">&amp;#34;height&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// toParametersMap() gives form as map
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> parameters: Map&amp;lt;String, List&amp;lt;String?&amp;gt;&amp;gt; = request.form().toParametersMap()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> assertEquals(&lt;span style="color:#e6db74">&amp;#34;rita&amp;#34;&lt;/span>, parameters.getFirst(&lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> assertEquals(listOf(&lt;span style="color:#e6db74">&amp;#34;55&amp;#34;&lt;/span>), parameters[&lt;span style="color:#e6db74">&amp;#34;age&amp;#34;&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> assertNull(parameters[&lt;span style="color:#e6db74">&amp;#34;height&amp;#34;&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>

&lt;h3 id="lens-typesafe-validating-api">Lens (typesafe, validating) API&lt;/h3>




&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">package&lt;/span> content.howto.use_html_forms
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.Body
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.ContentType
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.Method.GET
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.Request
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.with
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.lens.FormField
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.lens.Header
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.lens.LensFailure
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.lens.Validator
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.lens.WebForm
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.lens.int
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.lens.webForm
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">data&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Name&lt;/span>(&lt;span style="color:#66d9ef">val&lt;/span> value: String)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// define fields using the standard lens syntax
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> ageField = &lt;span style="color:#a6e22e">FormField&lt;/span>.int().required(&lt;span style="color:#e6db74">&amp;#34;age&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> nameField = &lt;span style="color:#a6e22e">FormField&lt;/span>.map(&lt;span style="color:#f92672">::&lt;/span>Name, Name&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#66d9ef">value&lt;/span>).optional(&lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// add fields to a form definition, along with a validator
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> strictFormBody = &lt;span style="color:#a6e22e">Body&lt;/span>.webForm(&lt;span style="color:#a6e22e">Validator&lt;/span>.Strict, nameField, ageField).toLens()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> feedbackFormBody = &lt;span style="color:#a6e22e">Body&lt;/span>.webForm(&lt;span style="color:#a6e22e">Validator&lt;/span>.Feedback, nameField, ageField).toLens()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> invalidRequest = Request(GET, &lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .with(&lt;span style="color:#a6e22e">Header&lt;/span>.CONTENT_TYPE of &lt;span style="color:#a6e22e">ContentType&lt;/span>.APPLICATION_FORM_URLENCODED)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// the &amp;#34;strict&amp;#34; form rejects (throws a LensFailure) because &amp;#34;age&amp;#34; is required
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> strictFormBody(invalidRequest)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">catch&lt;/span> (e: LensFailure) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println(e.message)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// the &amp;#34;feedback&amp;#34; form doesn&amp;#39;t throw, but collects errors to be reported later
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> invalidForm = feedbackFormBody(invalidRequest)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println(invalidForm.errors)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// creating valid form using &amp;#34;with()&amp;#34; and setting it onto the request
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> webForm = WebForm().with(ageField of &lt;span style="color:#ae81ff">55&lt;/span>, nameField of Name(&lt;span style="color:#e6db74">&amp;#34;rita&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> validRequest = Request(GET, &lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span>).with(strictFormBody of webForm)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// to extract the contents, we first extract the form and then extract the fields from it
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// using the lenses
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> validForm = strictFormBody(validRequest)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> age = ageField(validForm)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println(age)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Use Multipart Forms</title><link>https://http4k.org/howto/use_multipart_forms/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/howto/use_multipart_forms/</guid><description>&lt;p>Multipart form support is provided on 2 levels:&lt;/p>
&lt;ol>
&lt;li>Through the creation of a &lt;code>MultipartFormBody&lt;/code> which can be set on a &lt;code>Request&lt;/code>.&lt;/li>
&lt;li>Using the Lens system, which adds the facility to define form fields in a typesafe way, and to validate form contents (in either a strict (400) or &amp;ldquo;feedback&amp;rdquo; mode).&lt;/li>
&lt;/ol>
&lt;h3 id="gradle-setup">Gradle setup&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-core&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-multipart&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="standard-non-typesafe-api">Standard (non-typesafe) API&lt;/h3>




&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">package&lt;/span> content.howto.use_multipart_forms
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.client.ApacheClient
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.ContentType
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.Method.POST
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.MultipartFormBody
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.Request
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.Response
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.Status.Companion.OK
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.lens.MultipartFormField
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.lens.MultipartFormFile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.server.SunHttp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.server.asServer
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// extract the body from the request and then the fields/files from it
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> server = { r: Request &lt;span style="color:#f92672">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> receivedForm = &lt;span style="color:#a6e22e">MultipartFormBody&lt;/span>.from(r)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println(receivedForm.fieldValues(&lt;span style="color:#e6db74">&amp;#34;field&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println(receivedForm.&lt;span style="color:#66d9ef">field&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;field2&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println(receivedForm.files(&lt;span style="color:#e6db74">&amp;#34;file&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Response(OK)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }.asServer(SunHttp(&lt;span style="color:#ae81ff">8000&lt;/span>)).start()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// add fields and files to the multipart form body
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> body = MultipartFormBody()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .plus(&lt;span style="color:#e6db74">&amp;#34;field&amp;#34;&lt;/span> to &lt;span style="color:#e6db74">&amp;#34;my-value&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .plus(&lt;span style="color:#e6db74">&amp;#34;field2&amp;#34;&lt;/span> to MultipartFormField(&lt;span style="color:#e6db74">&amp;#34;my-value2&amp;#34;&lt;/span>, listOf(&lt;span style="color:#e6db74">&amp;#34;my-header&amp;#34;&lt;/span> to &lt;span style="color:#e6db74">&amp;#34;my-value&amp;#34;&lt;/span>)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .plus(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;file&amp;#34;&lt;/span> to MultipartFormFile(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;image.txt&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ContentType&lt;/span>.OCTET_STREAM,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;somebinarycontent&amp;#34;&lt;/span>.byteInputStream()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// we need to set both the body AND the correct content type header on the the request
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> request = Request(POST, &lt;span style="color:#e6db74">&amp;#34;http://localhost:8000&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .header(&lt;span style="color:#e6db74">&amp;#34;content-type&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;multipart/form-data; boundary=&lt;/span>&lt;span style="color:#e6db74">${body.boundary}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .body(body)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println(ApacheClient()(request))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> server.stop()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>

&lt;h3 id="lens-typesafe-validating-api---reads-all-contents-onto-diskmemory">Lens (typesafe, validating) API - reads ALL contents onto disk/memory&lt;/h3>




&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">package&lt;/span> content.howto.use_multipart_forms
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.client.ApacheClient
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.Body
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.ContentType
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.Method.POST
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.Request
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.Response
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.Status.Companion.OK
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.then
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.with
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.filter.ServerFilters
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.lens.MultipartForm
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.lens.MultipartFormField
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.lens.MultipartFormFile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.lens.Validator
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.lens.multipartForm
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.server.SunHttp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.server.asServer
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">data&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Name&lt;/span>(&lt;span style="color:#66d9ef">val&lt;/span> value: String)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// define fields using the standard lens syntax
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> nameField = &lt;span style="color:#a6e22e">MultipartFormField&lt;/span>.string().map(&lt;span style="color:#f92672">::&lt;/span>Name, Name&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#66d9ef">value&lt;/span>).required(&lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> imageFile = &lt;span style="color:#a6e22e">MultipartFormFile&lt;/span>.optional(&lt;span style="color:#e6db74">&amp;#34;image&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// add fields to a form definition, along with a validator
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> strictFormBody =
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Body&lt;/span>.multipartForm(&lt;span style="color:#a6e22e">Validator&lt;/span>.Strict, nameField, imageFile, diskThreshold = &lt;span style="color:#ae81ff">5&lt;/span>).toLens()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> server = &lt;span style="color:#a6e22e">ServerFilters&lt;/span>.CatchAll().then { r: Request &lt;span style="color:#f92672">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// to extract the contents, we first extract the form and then extract the fields from
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// it using the lenses
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// NOTE: we are &amp;#34;using&amp;#34; the form body here because we want to close the underlying
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// file streams
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> strictFormBody(r).use {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println(nameField(&lt;span style="color:#66d9ef">it&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println(imageFile(&lt;span style="color:#66d9ef">it&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Response(OK)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }.asServer(SunHttp(&lt;span style="color:#ae81ff">8000&lt;/span>)).start()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// creating valid form using &amp;#34;with()&amp;#34; and setting it onto the request. The content type
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// and boundary are taken care of automatically
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> multipartform = MultipartForm().with(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> nameField of Name(&lt;span style="color:#e6db74">&amp;#34;rita&amp;#34;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> imageFile of MultipartFormFile(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;image.txt&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ContentType&lt;/span>.OCTET_STREAM,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;somebinarycontent&amp;#34;&lt;/span>.byteInputStream()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> validRequest = Request(POST, &lt;span style="color:#e6db74">&amp;#34;http://localhost:8000&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .with(strictFormBody of multipartform)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println(ApacheClient()(validRequest))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> server.stop()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>

&lt;h3 id="streaming---iterate-over-multiparts">Streaming - iterate over Multiparts&lt;/h3>




&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">package&lt;/span> content.howto.use_multipart_forms
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.client.ApacheClient
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.Body
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.ContentType
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.Method.POST
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.MultipartEntity
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.Request
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.Response
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.Status.Companion.OK
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.multipartIterator
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.then
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.with
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.filter.ServerFilters
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.lens.MultipartForm
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.lens.MultipartFormField
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.lens.MultipartFormFile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.lens.Validator
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.lens.multipartForm
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.server.SunHttp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.server.asServer
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> server = &lt;span style="color:#a6e22e">ServerFilters&lt;/span>.CatchAll().then { r: Request &lt;span style="color:#f92672">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// here we are iterating over the multiparts as we read them out of the input
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> fields = r.multipartIterator().asSequence()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .fold(emptyList&amp;lt;&lt;span style="color:#a6e22e">MultipartEntity&lt;/span>.Field&amp;gt;()) { memo, next &lt;span style="color:#f92672">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">when&lt;/span> (next) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">is&lt;/span> &lt;span style="color:#a6e22e">MultipartEntity&lt;/span>.File &lt;span style="color:#f92672">-&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// do something with the file right here...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// like stream it to another server
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> memo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">is&lt;/span> &lt;span style="color:#a6e22e">MultipartEntity&lt;/span>.Field &lt;span style="color:#f92672">-&amp;gt;&lt;/span> memo.plus(next)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println(fields)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Response(OK)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }.asServer(SunHttp(&lt;span style="color:#ae81ff">8000&lt;/span>)).start()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println(ApacheClient()(buildMultipartRequest()))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> server.stop()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">buildMultipartRequest&lt;/span>(): Request {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// define fields using the standard lens syntax
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> nameField = &lt;span style="color:#a6e22e">MultipartFormField&lt;/span>.string().map(&lt;span style="color:#f92672">::&lt;/span>Name, Name&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#66d9ef">value&lt;/span>).required(&lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> imageFile = &lt;span style="color:#a6e22e">MultipartFormFile&lt;/span>.optional(&lt;span style="color:#e6db74">&amp;#34;image&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// add fields to a form definition, along with a validator
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> strictFormBody =
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Body&lt;/span>.multipartForm(&lt;span style="color:#a6e22e">Validator&lt;/span>.Strict, nameField, imageFile, diskThreshold = &lt;span style="color:#ae81ff">5&lt;/span>).toLens()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> multipartform = MultipartForm().with(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> nameField of Name(&lt;span style="color:#e6db74">&amp;#34;rita&amp;#34;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> imageFile of MultipartFormFile(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;image.txt&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ContentType&lt;/span>.OCTET_STREAM,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;somebinarycontent&amp;#34;&lt;/span>.byteInputStream()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> Request(POST, &lt;span style="color:#e6db74">&amp;#34;http://localhost:8000&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .with(strictFormBody of multipartform)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>

&lt;h3 id="processing-files-with-a-filter-and-convert-to-standard-form">Processing Files with a Filter and convert to standard form&lt;/h3>




&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">package&lt;/span> content.howto.use_multipart_forms
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.client.ApacheClient
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.Body
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.ContentType
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.Method.POST
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.MultipartEntity
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.Request
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.Response
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.Status.Companion.OK
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.then
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.with
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.filter.ProcessFiles
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.filter.ServerFilters
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.lens.FormField
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.lens.MultipartForm
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.lens.MultipartFormField
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.lens.MultipartFormFile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.lens.Validator
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.lens.multipartForm
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.lens.webForm
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.server.SunHttp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.server.asServer
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">data&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">AName&lt;/span>(&lt;span style="color:#66d9ef">val&lt;/span> value: String)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> server = &lt;span style="color:#a6e22e">ServerFilters&lt;/span>.ProcessFiles { multipartFile: &lt;span style="color:#a6e22e">MultipartEntity&lt;/span>.File &lt;span style="color:#f92672">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// do something with the file right here... like stream it to another server and
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// return the guide.reference
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> println(String(multipartFile.&lt;span style="color:#66d9ef">file&lt;/span>.content.readBytes()))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> multipartFile.&lt;span style="color:#66d9ef">file&lt;/span>.filename
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }.then { req: Request &lt;span style="color:#f92672">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// this is the web-form definition - it is DIFFERENT to the multipart form definition,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// because the fields and content-type have been replaced in the ProcessFiles filter
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> nameField = &lt;span style="color:#a6e22e">FormField&lt;/span>.map(&lt;span style="color:#f92672">::&lt;/span>AName, AName&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#66d9ef">value&lt;/span>).required(&lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> imageFile = &lt;span style="color:#a6e22e">FormField&lt;/span>.optional(&lt;span style="color:#e6db74">&amp;#34;image&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> body = &lt;span style="color:#a6e22e">Body&lt;/span>.webForm(&lt;span style="color:#a6e22e">Validator&lt;/span>.Strict, nameField, imageFile).toLens()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println(body(req))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Response(OK)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }.asServer(SunHttp(&lt;span style="color:#ae81ff">8000&lt;/span>)).start()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println(ApacheClient()(buildValidMultipartRequest()))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> server.stop()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">buildValidMultipartRequest&lt;/span>(): Request {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// define fields using the standard lens syntax
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> nameField = &lt;span style="color:#a6e22e">MultipartFormField&lt;/span>.string().map(&lt;span style="color:#f92672">::&lt;/span>AName, AName&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#66d9ef">value&lt;/span>).required(&lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> imageFile = &lt;span style="color:#a6e22e">MultipartFormFile&lt;/span>.optional(&lt;span style="color:#e6db74">&amp;#34;image&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// add fields to a form definition, along with a validator
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> strictFormBody =
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Body&lt;/span>.multipartForm(&lt;span style="color:#a6e22e">Validator&lt;/span>.Strict, nameField, imageFile, diskThreshold = &lt;span style="color:#ae81ff">5&lt;/span>).toLens()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> multipartform = MultipartForm().with(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> nameField of AName(&lt;span style="color:#e6db74">&amp;#34;rita&amp;#34;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> imageFile of MultipartFormFile(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;image.txt&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ContentType&lt;/span>.OCTET_STREAM,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;somebinarycontent&amp;#34;&lt;/span>.byteInputStream()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> Request(POST, &lt;span style="color:#e6db74">&amp;#34;http://localhost:8000&amp;#34;&lt;/span>).with(strictFormBody of multipartform)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>

&lt;h3 id="multipart-combined-with-typesafe-contract-openapi">Multipart combined with typesafe contract (OpenApi)&lt;/h3>




&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">package&lt;/span> content.howto.use_multipart_forms
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.contract.PreFlightExtraction
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.contract.contract
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.contract.meta
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.contract.openapi.ApiInfo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.contract.openapi.v3.OpenApi3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.Body
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.Method.POST
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.Response
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.Status.Companion.OK
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.format.Jackson
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.lens.MultipartFormField
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.lens.MultipartFormFile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.lens.Validator.Strict
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.lens.instant
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.lens.multipartForm
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.server.ApacheServer
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.server.asServer
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> documentPart = &lt;span style="color:#a6e22e">MultipartFormFile&lt;/span>.required(&lt;span style="color:#e6db74">&amp;#34;document&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> ownerPart = &lt;span style="color:#a6e22e">MultipartFormField&lt;/span>.string().required(&lt;span style="color:#e6db74">&amp;#34;owner&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> signaturePart = &lt;span style="color:#a6e22e">MultipartFormField&lt;/span>.string().instant().required(&lt;span style="color:#e6db74">&amp;#34;signedAt&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> formLens = &lt;span style="color:#a6e22e">Body&lt;/span>.multipartForm(Strict, documentPart, ownerPart, signaturePart).toLens()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> handler = contract {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> renderer = OpenApi3(ApiInfo(&lt;span style="color:#e6db74">&amp;#34;My great API&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;v1.0&amp;#34;&lt;/span>), Jackson)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> descriptionPath = &lt;span style="color:#e6db74">&amp;#34;/openapi.json&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> routes &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;/api/document-upload&amp;#34;&lt;/span> meta {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> summary = &lt;span style="color:#e6db74">&amp;#34;Uploads a document including the owner name and when it was signed&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// required to avoid reading the multipart stream twice!
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> preFlightExtraction = &lt;span style="color:#a6e22e">PreFlightExtraction&lt;/span>.IgnoreBody
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> receiving(formLens)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> returning(OK)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } bindContract POST to { req &lt;span style="color:#f92672">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> formLens(req).use {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> doc = documentPart(&lt;span style="color:#66d9ef">it&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> owner = ownerPart(&lt;span style="color:#66d9ef">it&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> signatureDate = signaturePart(&lt;span style="color:#66d9ef">it&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//process file...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> Response(OK).body(&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${doc.filename}&lt;/span>&lt;span style="color:#e6db74"> by &lt;/span>&lt;span style="color:#e6db74">$owner&lt;/span>&lt;span style="color:#e6db74">, signed at &lt;/span>&lt;span style="color:#e6db74">$signatureDate&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * example request:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * curl -v -H &amp;#39;Content-Type: multipart/form-data&amp;#39; \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * -F owner=&amp;#34;John Doe&amp;#34; \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * -F signedAt=&amp;#34;2011-12-03T10:15:30Z&amp;#34; \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * -F document=@README.md \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * http://localhost:8081/api/document-upload
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> handler.asServer(ApacheServer(&lt;span style="color:#ae81ff">8081&lt;/span>)).start()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Web: HTMX</title><link>https://http4k.org/ecosystem/http4k/reference/htmx/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/http4k/reference/htmx/</guid><description>&lt;h3 id="installation-gradle">Installation (Gradle)&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-web-htmx&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-template-handlebars&amp;#34;&lt;/span>) &lt;span style="color:#75715e">// Handlebars
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="about">About&lt;/h3>
&lt;p>Utilities to support &lt;a href="https://htmx.org">htmx&lt;/a> development. Includes the htmx and hyperscript Webjar support and a set of classes/functions to ease development of htmx-powered applications.&lt;/p></description></item><item><title>Webhooks</title><link>https://http4k.org/ecosystem/http4k/reference/webhooks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/http4k/reference/webhooks/</guid><description>&lt;h3 id="installation-gradle">Installation (Gradle)&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
 implementation(platform("org.http4k:http4k-bom:5.46.0.0"))

&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.http4k:http4k-webhooks&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="about">About&lt;/h3>
&lt;p>This module provides infrastructure for the &lt;a href="https://www.standardwebhooks.com/">Webhook standard&lt;/a>, providing infrastructure for
signing and verifying of Webhook requests (HMAC256 only currently) as per the standard, and support for the defined Webhook event wrapper format.&lt;/p></description></item><item><title>WebSockets</title><link>https://http4k.org/ecosystem/http4k/concepts/websockets/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/ecosystem/http4k/concepts/websockets/</guid><description>&lt;p>&lt;strong>http4k&lt;/strong> provides WebSocket support using a simple, consistent, typesafe, and testable API on supported server
backends.&lt;/p>
&lt;p>WebSocket communication consists of a few main concepts:&lt;/p></description></item><item><title>Write different test types</title><link>https://http4k.org/howto/write_different_test_types/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://http4k.org/howto/write_different_test_types/</guid><description>&lt;p>This example shows the various styles of testing endpoints, and requires both the &lt;code>http4k-core&lt;/code> and &lt;code>http4k-testing-hamkrest&lt;/code> modules:&lt;/p>
&lt;h3 id="code">Code&lt;/h3>




&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">package&lt;/span> content.howto.write_different_test_types
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> com.natpryce.hamkrest.and
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> com.natpryce.hamkrest.assertion.assertThat
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> com.natpryce.hamkrest.equalTo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.client.OkHttp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.HttpHandler
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.Method.GET
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.Method.POST
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.Request
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.Response
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.Status.Companion.NOT_FOUND
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.Status.Companion.OK
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.Uri
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.core.then
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.filter.ClientFilters.SetHostFrom
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.filter.ServerFilters
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.hamkrest.hasBody
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.hamkrest.hasStatus
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.routing.bind
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.routing.path
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.routing.routes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.server.Http4kServer
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.server.Jetty
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.http4k.server.asServer
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.junit.jupiter.api.AfterEach
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.junit.jupiter.api.BeforeEach
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.junit.jupiter.api.Test
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">AnswerRecorder&lt;/span>(&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> httpClient: HttpHandler) : (Int) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> Unit {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">override&lt;/span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">invoke&lt;/span>(answer: Int) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> httpClient(Request(POST, &lt;span style="color:#e6db74">&amp;#34;/&lt;/span>&lt;span style="color:#e6db74">$answer&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">myMathsEndpoint&lt;/span>(fn: (Int, Int) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> Int, recorder: (Int) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> Unit): HttpHandler = { req &lt;span style="color:#f92672">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> answer = fn(req.query(&lt;span style="color:#e6db74">&amp;#34;first&amp;#34;&lt;/span>)&lt;span style="color:#f92672">!!&lt;/span>.toInt(), req.query(&lt;span style="color:#e6db74">&amp;#34;second&amp;#34;&lt;/span>)&lt;span style="color:#f92672">!!&lt;/span>.toInt())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> recorder(answer)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Response(OK).body(&lt;span style="color:#e6db74">&amp;#34;the answer is &lt;/span>&lt;span style="color:#e6db74">$answer&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">EndpointUnitTest&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Test&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">`adds numbers and records answer`&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> answer: Int? = &lt;span style="color:#66d9ef">null&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> unit = myMathsEndpoint({ first, second &lt;span style="color:#f92672">-&amp;gt;&lt;/span> first + second }, { answer = &lt;span style="color:#66d9ef">it&lt;/span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> response = unit(Request(GET, &lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span>).query(&lt;span style="color:#e6db74">&amp;#34;first&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;123&amp;#34;&lt;/span>).query(&lt;span style="color:#e6db74">&amp;#34;second&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;456&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> assertThat(answer, equalTo(&lt;span style="color:#ae81ff">579&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> assertThat(response, hasStatus(OK).and(hasBody(&lt;span style="color:#e6db74">&amp;#34;the answer is 579&amp;#34;&lt;/span>)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">MyMathsApp&lt;/span>(recorderHttp: HttpHandler) =
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ServerFilters&lt;/span>.CatchAll().then(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> routes(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;/add&amp;#34;&lt;/span> bind GET to myMathsEndpoint(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { first, second &lt;span style="color:#f92672">-&amp;gt;&lt;/span> first + second },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> AnswerRecorder(recorderHttp)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">FakeRecorderHttp&lt;/span> : HttpHandler {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> calls = mutableListOf&amp;lt;Int&amp;gt;()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> app = routes(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;/{answer}&amp;#34;&lt;/span> bind POST to { request &lt;span style="color:#f92672">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> calls.add(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> request.path(&lt;span style="color:#e6db74">&amp;#34;answer&amp;#34;&lt;/span>)&lt;span style="color:#f92672">!!&lt;/span>.toInt()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ); Response(OK)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">override&lt;/span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">invoke&lt;/span>(request: Request): Response = app(request)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">FunctionalTest&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> recorderHttp = FakeRecorderHttp()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> app = MyMathsApp(recorderHttp)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Test&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">`adds numbers`&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> response = app(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Request(GET, &lt;span style="color:#e6db74">&amp;#34;/add&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .query(&lt;span style="color:#e6db74">&amp;#34;first&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;123&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .query(&lt;span style="color:#e6db74">&amp;#34;second&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;456&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> assertThat(response, hasStatus(OK).and(hasBody(&lt;span style="color:#e6db74">&amp;#34;the answer is 579&amp;#34;&lt;/span>)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> assertThat(recorderHttp.calls, equalTo(listOf(&lt;span style="color:#ae81ff">579&lt;/span>)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Test&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">`not found`&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> response = app(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Request(GET, &lt;span style="color:#e6db74">&amp;#34;/nothing&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .query(&lt;span style="color:#e6db74">&amp;#34;first&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;123&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .query(&lt;span style="color:#e6db74">&amp;#34;second&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;456&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> assertThat(response, hasStatus(NOT_FOUND))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">MyMathServer&lt;/span>(port: Int, recorderUri: Uri): Http4kServer {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> recorderHttp = SetHostFrom(recorderUri).then(OkHttp())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> MyMathsApp(recorderHttp).asServer(Jetty(port))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">EndToEndTest&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> client = OkHttp()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> recorderHttp = FakeRecorderHttp()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> recorder = recorderHttp.asServer(Jetty(&lt;span style="color:#ae81ff">8001&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> server = MyMathServer(&lt;span style="color:#ae81ff">8000&lt;/span>, &lt;span style="color:#a6e22e">Uri&lt;/span>.of(&lt;span style="color:#e6db74">&amp;#34;http://localhost:8001&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@BeforeEach&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">setup&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> recorder.start()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> server.start()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@AfterEach&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">teardown&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> server.stop()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> recorder.stop()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Test&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">`adds numbers`&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> response = client(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Request(GET, &lt;span style="color:#e6db74">&amp;#34;http://localhost:8000/add&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .query(&lt;span style="color:#e6db74">&amp;#34;first&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;123&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .query(&lt;span style="color:#e6db74">&amp;#34;second&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;456&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println(response)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> assertThat(response, hasStatus(OK).and(hasBody(&lt;span style="color:#e6db74">&amp;#34;the answer is 579&amp;#34;&lt;/span>)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> assertThat(recorderHttp.calls, equalTo(listOf(&lt;span style="color:#ae81ff">579&lt;/span>)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>